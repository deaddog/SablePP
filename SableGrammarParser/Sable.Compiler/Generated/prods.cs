/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  Sable.Compiler.analysis;

namespace Sable.Compiler.node {

public abstract partial class PGrammar : Node
{
}

public abstract class PPackage : Node
{
}

public abstract class PHelpers : Node
{
}

public abstract class PHelper : Node
{
}

public abstract class PTokens : Node
{
}

public abstract class PToken : Node
{
}

public abstract class PTokenlookahead : Node
{
}

public abstract class PRegex : Node
{
}

public abstract class POrpart : Node
{
}

public abstract class PRegexpart : Node
{
}

public abstract class PStates : Node
{
}

public abstract class PIgnoredtokens : Node
{
}

public abstract class PList : Node
{
}

public abstract class PListitem : Node
{
}

public abstract class PProductions : Node
{
}

public abstract class PAstproductions : Node
{
}

public abstract class PProduction : Node
{
}

public abstract class PProdtranslation : Node
{
}

public abstract class PTranslation : Node
{
}

public abstract class PProductionrule : Node
{
}

public abstract class PAlternative : Node
{
}

public abstract class PAlternativename : Node
{
}

public abstract class PElements : Node
{
}

public abstract partial class PElement : Node
{
}

public abstract class PElementname : Node
{
}

public abstract partial class PElementid : Node
{
}


public sealed class AGrammar : PGrammar
{
    private PPackage _package_;
    private PHelpers _helpers_;
    private PStates _states_;
    private PTokens _tokens_;
    private PIgnoredtokens _ignoredtokens_;
    private PProductions _productions_;
    private PAstproductions _astproductions_;

    public AGrammar ()
    {
    }

    public AGrammar (
            PPackage _package_,
            PHelpers _helpers_,
            PStates _states_,
            PTokens _tokens_,
            PIgnoredtokens _ignoredtokens_,
            PProductions _productions_,
            PAstproductions _astproductions_
    )
    {
        SetPackage (_package_);
        SetHelpers (_helpers_);
        SetStates (_states_);
        SetTokens (_tokens_);
        SetIgnoredtokens (_ignoredtokens_);
        SetProductions (_productions_);
        SetAstproductions (_astproductions_);
    }

    public override Object Clone()
    {
        return new AGrammar (
            (PPackage)CloneNode (_package_),
            (PHelpers)CloneNode (_helpers_),
            (PStates)CloneNode (_states_),
            (PTokens)CloneNode (_tokens_),
            (PIgnoredtokens)CloneNode (_ignoredtokens_),
            (PProductions)CloneNode (_productions_),
            (PAstproductions)CloneNode (_astproductions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGrammar(this);
    }

    public PPackage GetPackage ()
    {
        return _package_;
    }

    public void SetPackage (PPackage node)
    {
        if(_package_ != null)
        {
            _package_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _package_ = node;
    }
    public PHelpers GetHelpers ()
    {
        return _helpers_;
    }

    public void SetHelpers (PHelpers node)
    {
        if(_helpers_ != null)
        {
            _helpers_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _helpers_ = node;
    }
    public PStates GetStates ()
    {
        return _states_;
    }

    public void SetStates (PStates node)
    {
        if(_states_ != null)
        {
            _states_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _states_ = node;
    }
    public PTokens GetTokens ()
    {
        return _tokens_;
    }

    public void SetTokens (PTokens node)
    {
        if(_tokens_ != null)
        {
            _tokens_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tokens_ = node;
    }
    public PIgnoredtokens GetIgnoredtokens ()
    {
        return _ignoredtokens_;
    }

    public void SetIgnoredtokens (PIgnoredtokens node)
    {
        if(_ignoredtokens_ != null)
        {
            _ignoredtokens_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ignoredtokens_ = node;
    }
    public PProductions GetProductions ()
    {
        return _productions_;
    }

    public void SetProductions (PProductions node)
    {
        if(_productions_ != null)
        {
            _productions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _productions_ = node;
    }
    public PAstproductions GetAstproductions ()
    {
        return _astproductions_;
    }

    public void SetAstproductions (PAstproductions node)
    {
        if(_astproductions_ != null)
        {
            _astproductions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _astproductions_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_package_)
            + ToString (_helpers_)
            + ToString (_states_)
            + ToString (_tokens_)
            + ToString (_ignoredtokens_)
            + ToString (_productions_)
            + ToString (_astproductions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _package_ == child )
        {
            _package_ = null;
            return;
        }
        if ( _helpers_ == child )
        {
            _helpers_ = null;
            return;
        }
        if ( _states_ == child )
        {
            _states_ = null;
            return;
        }
        if ( _tokens_ == child )
        {
            _tokens_ = null;
            return;
        }
        if ( _ignoredtokens_ == child )
        {
            _ignoredtokens_ = null;
            return;
        }
        if ( _productions_ == child )
        {
            _productions_ = null;
            return;
        }
        if ( _astproductions_ == child )
        {
            _astproductions_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _package_ == oldChild )
        {
            SetPackage ((PPackage) newChild);
            return;
        }
        if ( _helpers_ == oldChild )
        {
            SetHelpers ((PHelpers) newChild);
            return;
        }
        if ( _states_ == oldChild )
        {
            SetStates ((PStates) newChild);
            return;
        }
        if ( _tokens_ == oldChild )
        {
            SetTokens ((PTokens) newChild);
            return;
        }
        if ( _ignoredtokens_ == oldChild )
        {
            SetIgnoredtokens ((PIgnoredtokens) newChild);
            return;
        }
        if ( _productions_ == oldChild )
        {
            SetProductions ((PProductions) newChild);
            return;
        }
        if ( _astproductions_ == oldChild )
        {
            SetAstproductions ((PAstproductions) newChild);
            return;
        }
    }

}
public sealed class APackage : PPackage
{
    private TPackagetoken _packagetoken_;
    private TPackagename _packagename_;
    private TSemicolon _semicolon_;

    public APackage ()
    {
    }

    public APackage (
            TPackagetoken _packagetoken_,
            TPackagename _packagename_,
            TSemicolon _semicolon_
    )
    {
        SetPackagetoken (_packagetoken_);
        SetPackagename (_packagename_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new APackage (
            (TPackagetoken)CloneNode (_packagetoken_),
            (TPackagename)CloneNode (_packagename_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPackage(this);
    }

    public TPackagetoken GetPackagetoken ()
    {
        return _packagetoken_;
    }

    public void SetPackagetoken (TPackagetoken node)
    {
        if(_packagetoken_ != null)
        {
            _packagetoken_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _packagetoken_ = node;
    }
    public TPackagename GetPackagename ()
    {
        return _packagename_;
    }

    public void SetPackagename (TPackagename node)
    {
        if(_packagename_ != null)
        {
            _packagename_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _packagename_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_packagetoken_)
            + ToString (_packagename_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _packagetoken_ == child )
        {
            _packagetoken_ = null;
            return;
        }
        if ( _packagename_ == child )
        {
            _packagename_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _packagetoken_ == oldChild )
        {
            SetPackagetoken ((TPackagetoken) newChild);
            return;
        }
        if ( _packagename_ == oldChild )
        {
            SetPackagename ((TPackagename) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AHelpers : PHelpers
{
    private THelperstoken _helperstoken_;
    private TypedList _helpers_;

    public AHelpers ()
    {
        this._helpers_ = new TypedList(new Helpers_Cast(this));
    }

    public AHelpers (
            THelperstoken _helperstoken_,
            IList _helpers_
    )
    {
        SetHelperstoken (_helperstoken_);
        this._helpers_ = new TypedList(new Helpers_Cast(this));
        this._helpers_.Clear();
        this._helpers_.AddAll(_helpers_);
    }

    public override Object Clone()
    {
        return new AHelpers (
            (THelperstoken)CloneNode (_helperstoken_),
            CloneList (_helpers_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHelpers(this);
    }

    public THelperstoken GetHelperstoken ()
    {
        return _helperstoken_;
    }

    public void SetHelperstoken (THelperstoken node)
    {
        if(_helperstoken_ != null)
        {
            _helperstoken_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _helperstoken_ = node;
    }
    public IList GetHelpers ()
    {
        return _helpers_;
    }

    public void setHelpers (IList list)
    {
        _helpers_.Clear();
        _helpers_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_helperstoken_)
            + ToString (_helpers_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _helperstoken_ == child )
        {
            _helperstoken_ = null;
            return;
        }
        if ( _helpers_.Contains(child) )
        {
            _helpers_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _helperstoken_ == oldChild )
        {
            SetHelperstoken ((THelperstoken) newChild);
            return;
        }
        for ( int i = 0; i < _helpers_.Count; i++ )
        {
            Node n = (Node)_helpers_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _helpers_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _helpers_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Helpers_Cast : Cast
    {
        AHelpers obj;

        internal Helpers_Cast (AHelpers obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PHelper node = (PHelper) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PHelper node = (PHelper) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AHelper : PHelper
{
    private TIdentifier _identifier_;
    private TEqual _equal_;
    private PRegex _regex_;
    private TSemicolon _semicolon_;

    public AHelper ()
    {
    }

    public AHelper (
            TIdentifier _identifier_,
            TEqual _equal_,
            PRegex _regex_,
            TSemicolon _semicolon_
    )
    {
        SetIdentifier (_identifier_);
        SetEqual (_equal_);
        SetRegex (_regex_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AHelper (
            (TIdentifier)CloneNode (_identifier_),
            (TEqual)CloneNode (_equal_),
            (PRegex)CloneNode (_regex_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHelper(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PRegex GetRegex ()
    {
        return _regex_;
    }

    public void SetRegex (PRegex node)
    {
        if(_regex_ != null)
        {
            _regex_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _regex_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
            + ToString (_equal_)
            + ToString (_regex_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _regex_ == child )
        {
            _regex_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _regex_ == oldChild )
        {
            SetRegex ((PRegex) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ATokens : PTokens
{
    private TTokenstoken _tokenstoken_;
    private TypedList _tokens_;

    public ATokens ()
    {
        this._tokens_ = new TypedList(new Tokens_Cast(this));
    }

    public ATokens (
            TTokenstoken _tokenstoken_,
            IList _tokens_
    )
    {
        SetTokenstoken (_tokenstoken_);
        this._tokens_ = new TypedList(new Tokens_Cast(this));
        this._tokens_.Clear();
        this._tokens_.AddAll(_tokens_);
    }

    public override Object Clone()
    {
        return new ATokens (
            (TTokenstoken)CloneNode (_tokenstoken_),
            CloneList (_tokens_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATokens(this);
    }

    public TTokenstoken GetTokenstoken ()
    {
        return _tokenstoken_;
    }

    public void SetTokenstoken (TTokenstoken node)
    {
        if(_tokenstoken_ != null)
        {
            _tokenstoken_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tokenstoken_ = node;
    }
    public IList GetTokens ()
    {
        return _tokens_;
    }

    public void setTokens (IList list)
    {
        _tokens_.Clear();
        _tokens_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_tokenstoken_)
            + ToString (_tokens_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _tokenstoken_ == child )
        {
            _tokenstoken_ = null;
            return;
        }
        if ( _tokens_.Contains(child) )
        {
            _tokens_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _tokenstoken_ == oldChild )
        {
            SetTokenstoken ((TTokenstoken) newChild);
            return;
        }
        for ( int i = 0; i < _tokens_.Count; i++ )
        {
            Node n = (Node)_tokens_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _tokens_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _tokens_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Tokens_Cast : Cast
    {
        ATokens obj;

        internal Tokens_Cast (ATokens obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PToken node = (PToken) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PToken node = (PToken) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AToken : PToken
{
    private PList _statelist_;
    private TIdentifier _identifier_;
    private TEqual _equal_;
    private PRegex _regex_;
    private PTokenlookahead _tokenlookahead_;
    private TSemicolon _semicolon_;

    public AToken ()
    {
    }

    public AToken (
            PList _statelist_,
            TIdentifier _identifier_,
            TEqual _equal_,
            PRegex _regex_,
            PTokenlookahead _tokenlookahead_,
            TSemicolon _semicolon_
    )
    {
        SetStatelist (_statelist_);
        SetIdentifier (_identifier_);
        SetEqual (_equal_);
        SetRegex (_regex_);
        SetTokenlookahead (_tokenlookahead_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AToken (
            (PList)CloneNode (_statelist_),
            (TIdentifier)CloneNode (_identifier_),
            (TEqual)CloneNode (_equal_),
            (PRegex)CloneNode (_regex_),
            (PTokenlookahead)CloneNode (_tokenlookahead_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAToken(this);
    }

    public PList GetStatelist ()
    {
        return _statelist_;
    }

    public void SetStatelist (PList node)
    {
        if(_statelist_ != null)
        {
            _statelist_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statelist_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PRegex GetRegex ()
    {
        return _regex_;
    }

    public void SetRegex (PRegex node)
    {
        if(_regex_ != null)
        {
            _regex_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _regex_ = node;
    }
    public PTokenlookahead GetTokenlookahead ()
    {
        return _tokenlookahead_;
    }

    public void SetTokenlookahead (PTokenlookahead node)
    {
        if(_tokenlookahead_ != null)
        {
            _tokenlookahead_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tokenlookahead_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statelist_)
            + ToString (_identifier_)
            + ToString (_equal_)
            + ToString (_regex_)
            + ToString (_tokenlookahead_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statelist_ == child )
        {
            _statelist_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _regex_ == child )
        {
            _regex_ = null;
            return;
        }
        if ( _tokenlookahead_ == child )
        {
            _tokenlookahead_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statelist_ == oldChild )
        {
            SetStatelist ((PList) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _regex_ == oldChild )
        {
            SetRegex ((PRegex) newChild);
            return;
        }
        if ( _tokenlookahead_ == oldChild )
        {
            SetTokenlookahead ((PTokenlookahead) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ATokenlookahead : PTokenlookahead
{
    private TSlash _slash_;
    private PRegex _regex_;

    public ATokenlookahead ()
    {
    }

    public ATokenlookahead (
            TSlash _slash_,
            PRegex _regex_
    )
    {
        SetSlash (_slash_);
        SetRegex (_regex_);
    }

    public override Object Clone()
    {
        return new ATokenlookahead (
            (TSlash)CloneNode (_slash_),
            (PRegex)CloneNode (_regex_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATokenlookahead(this);
    }

    public TSlash GetSlash ()
    {
        return _slash_;
    }

    public void SetSlash (TSlash node)
    {
        if(_slash_ != null)
        {
            _slash_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _slash_ = node;
    }
    public PRegex GetRegex ()
    {
        return _regex_;
    }

    public void SetRegex (PRegex node)
    {
        if(_regex_ != null)
        {
            _regex_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _regex_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_slash_)
            + ToString (_regex_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _slash_ == child )
        {
            _slash_ = null;
            return;
        }
        if ( _regex_ == child )
        {
            _regex_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _slash_ == oldChild )
        {
            SetSlash ((TSlash) newChild);
            return;
        }
        if ( _regex_ == oldChild )
        {
            SetRegex ((PRegex) newChild);
            return;
        }
    }

}
public sealed class ARegex : PRegex
{
    private TypedList _parts_;

    public ARegex ()
    {
        this._parts_ = new TypedList(new Parts_Cast(this));
    }

    public ARegex (
            IList _parts_
    )
    {
        this._parts_ = new TypedList(new Parts_Cast(this));
        this._parts_.Clear();
        this._parts_.AddAll(_parts_);
    }

    public override Object Clone()
    {
        return new ARegex (
            CloneList (_parts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARegex(this);
    }

    public IList GetParts ()
    {
        return _parts_;
    }

    public void setParts (IList list)
    {
        _parts_.Clear();
        _parts_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_parts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parts_.Contains(child) )
        {
            _parts_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _parts_.Count; i++ )
        {
            Node n = (Node)_parts_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _parts_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _parts_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Parts_Cast : Cast
    {
        ARegex obj;

        internal Parts_Cast (ARegex obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            POrpart node = (POrpart) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            POrpart node = (POrpart) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ARegexOrpart : POrpart
{
    private TPipe _pipe_;
    private TypedList _regexpart_;

    public ARegexOrpart ()
    {
        this._regexpart_ = new TypedList(new Regexpart_Cast(this));
    }

    public ARegexOrpart (
            TPipe _pipe_,
            IList _regexpart_
    )
    {
        SetPipe (_pipe_);
        this._regexpart_ = new TypedList(new Regexpart_Cast(this));
        this._regexpart_.Clear();
        this._regexpart_.AddAll(_regexpart_);
    }

    public override Object Clone()
    {
        return new ARegexOrpart (
            (TPipe)CloneNode (_pipe_),
            CloneList (_regexpart_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARegexOrpart(this);
    }

    public TPipe GetPipe ()
    {
        return _pipe_;
    }

    public void SetPipe (TPipe node)
    {
        if(_pipe_ != null)
        {
            _pipe_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _pipe_ = node;
    }
    public IList GetRegexpart ()
    {
        return _regexpart_;
    }

    public void setRegexpart (IList list)
    {
        _regexpart_.Clear();
        _regexpart_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_pipe_)
            + ToString (_regexpart_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _pipe_ == child )
        {
            _pipe_ = null;
            return;
        }
        if ( _regexpart_.Contains(child) )
        {
            _regexpart_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _pipe_ == oldChild )
        {
            SetPipe ((TPipe) newChild);
            return;
        }
        for ( int i = 0; i < _regexpart_.Count; i++ )
        {
            Node n = (Node)_regexpart_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _regexpart_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _regexpart_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Regexpart_Cast : Cast
    {
        ARegexOrpart obj;

        internal Regexpart_Cast (ARegexOrpart obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PRegexpart node = (PRegexpart) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PRegexpart node = (PRegexpart) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ACharRegexpart : PRegexpart
{
    private TCharacter _character_;

    public ACharRegexpart ()
    {
    }

    public ACharRegexpart (
            TCharacter _character_
    )
    {
        SetCharacter (_character_);
    }

    public override Object Clone()
    {
        return new ACharRegexpart (
            (TCharacter)CloneNode (_character_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACharRegexpart(this);
    }

    public TCharacter GetCharacter ()
    {
        return _character_;
    }

    public void SetCharacter (TCharacter node)
    {
        if(_character_ != null)
        {
            _character_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _character_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_character_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _character_ == child )
        {
            _character_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _character_ == oldChild )
        {
            SetCharacter ((TCharacter) newChild);
            return;
        }
    }

}
public sealed class ADecRegexpart : PRegexpart
{
    private TDecChar _dec_char_;

    public ADecRegexpart ()
    {
    }

    public ADecRegexpart (
            TDecChar _dec_char_
    )
    {
        SetDecChar (_dec_char_);
    }

    public override Object Clone()
    {
        return new ADecRegexpart (
            (TDecChar)CloneNode (_dec_char_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADecRegexpart(this);
    }

    public TDecChar GetDecChar ()
    {
        return _dec_char_;
    }

    public void SetDecChar (TDecChar node)
    {
        if(_dec_char_ != null)
        {
            _dec_char_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dec_char_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_dec_char_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _dec_char_ == child )
        {
            _dec_char_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _dec_char_ == oldChild )
        {
            SetDecChar ((TDecChar) newChild);
            return;
        }
    }

}
public sealed class AHexRegexpart : PRegexpart
{
    private THexChar _hex_char_;

    public AHexRegexpart ()
    {
    }

    public AHexRegexpart (
            THexChar _hex_char_
    )
    {
        SetHexChar (_hex_char_);
    }

    public override Object Clone()
    {
        return new AHexRegexpart (
            (THexChar)CloneNode (_hex_char_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHexRegexpart(this);
    }

    public THexChar GetHexChar ()
    {
        return _hex_char_;
    }

    public void SetHexChar (THexChar node)
    {
        if(_hex_char_ != null)
        {
            _hex_char_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _hex_char_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_hex_char_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _hex_char_ == child )
        {
            _hex_char_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _hex_char_ == oldChild )
        {
            SetHexChar ((THexChar) newChild);
            return;
        }
    }

}
public sealed class AUnarystarRegexpart : PRegexpart
{
    private PRegexpart _regexpart_;
    private TStar _star_;

    public AUnarystarRegexpart ()
    {
    }

    public AUnarystarRegexpart (
            PRegexpart _regexpart_,
            TStar _star_
    )
    {
        SetRegexpart (_regexpart_);
        SetStar (_star_);
    }

    public override Object Clone()
    {
        return new AUnarystarRegexpart (
            (PRegexpart)CloneNode (_regexpart_),
            (TStar)CloneNode (_star_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUnarystarRegexpart(this);
    }

    public PRegexpart GetRegexpart ()
    {
        return _regexpart_;
    }

    public void SetRegexpart (PRegexpart node)
    {
        if(_regexpart_ != null)
        {
            _regexpart_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _regexpart_ = node;
    }
    public TStar GetStar ()
    {
        return _star_;
    }

    public void SetStar (TStar node)
    {
        if(_star_ != null)
        {
            _star_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _star_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_regexpart_)
            + ToString (_star_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _regexpart_ == child )
        {
            _regexpart_ = null;
            return;
        }
        if ( _star_ == child )
        {
            _star_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _regexpart_ == oldChild )
        {
            SetRegexpart ((PRegexpart) newChild);
            return;
        }
        if ( _star_ == oldChild )
        {
            SetStar ((TStar) newChild);
            return;
        }
    }

}
public sealed class AUnaryquestionRegexpart : PRegexpart
{
    private PRegexpart _regexpart_;
    private TQMark _question_;

    public AUnaryquestionRegexpart ()
    {
    }

    public AUnaryquestionRegexpart (
            PRegexpart _regexpart_,
            TQMark _question_
    )
    {
        SetRegexpart (_regexpart_);
        SetQuestion (_question_);
    }

    public override Object Clone()
    {
        return new AUnaryquestionRegexpart (
            (PRegexpart)CloneNode (_regexpart_),
            (TQMark)CloneNode (_question_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUnaryquestionRegexpart(this);
    }

    public PRegexpart GetRegexpart ()
    {
        return _regexpart_;
    }

    public void SetRegexpart (PRegexpart node)
    {
        if(_regexpart_ != null)
        {
            _regexpart_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _regexpart_ = node;
    }
    public TQMark GetQuestion ()
    {
        return _question_;
    }

    public void SetQuestion (TQMark node)
    {
        if(_question_ != null)
        {
            _question_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _question_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_regexpart_)
            + ToString (_question_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _regexpart_ == child )
        {
            _regexpart_ = null;
            return;
        }
        if ( _question_ == child )
        {
            _question_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _regexpart_ == oldChild )
        {
            SetRegexpart ((PRegexpart) newChild);
            return;
        }
        if ( _question_ == oldChild )
        {
            SetQuestion ((TQMark) newChild);
            return;
        }
    }

}
public sealed class AUnaryplusRegexpart : PRegexpart
{
    private PRegexpart _regexpart_;
    private TPlus _plus_;

    public AUnaryplusRegexpart ()
    {
    }

    public AUnaryplusRegexpart (
            PRegexpart _regexpart_,
            TPlus _plus_
    )
    {
        SetRegexpart (_regexpart_);
        SetPlus (_plus_);
    }

    public override Object Clone()
    {
        return new AUnaryplusRegexpart (
            (PRegexpart)CloneNode (_regexpart_),
            (TPlus)CloneNode (_plus_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUnaryplusRegexpart(this);
    }

    public PRegexpart GetRegexpart ()
    {
        return _regexpart_;
    }

    public void SetRegexpart (PRegexpart node)
    {
        if(_regexpart_ != null)
        {
            _regexpart_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _regexpart_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_regexpart_)
            + ToString (_plus_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _regexpart_ == child )
        {
            _regexpart_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _regexpart_ == oldChild )
        {
            SetRegexpart ((PRegexpart) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
    }

}
public sealed class ABinaryplusRegexpart : PRegexpart
{
    private TLBkt _lpar_;
    private PRegexpart _left_;
    private TPlus _plus_;
    private PRegexpart _right_;
    private TRBkt _rpar_;

    public ABinaryplusRegexpart ()
    {
    }

    public ABinaryplusRegexpart (
            TLBkt _lpar_,
            PRegexpart _left_,
            TPlus _plus_,
            PRegexpart _right_,
            TRBkt _rpar_
    )
    {
        SetLpar (_lpar_);
        SetLeft (_left_);
        SetPlus (_plus_);
        SetRight (_right_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new ABinaryplusRegexpart (
            (TLBkt)CloneNode (_lpar_),
            (PRegexpart)CloneNode (_left_),
            (TPlus)CloneNode (_plus_),
            (PRegexpart)CloneNode (_right_),
            (TRBkt)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABinaryplusRegexpart(this);
    }

    public TLBkt GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBkt node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public PRegexpart GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PRegexpart node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PRegexpart GetRight ()
    {
        return _right_;
    }

    public void SetRight (PRegexpart node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }
    public TRBkt GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBkt node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_left_)
            + ToString (_plus_)
            + ToString (_right_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBkt) newChild);
            return;
        }
        if ( _left_ == oldChild )
        {
            SetLeft ((PRegexpart) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PRegexpart) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBkt) newChild);
            return;
        }
    }

}
public sealed class ABinaryminusRegexpart : PRegexpart
{
    private TLBkt _lpar_;
    private PRegexpart _left_;
    private TMinus _minus_;
    private PRegexpart _right_;
    private TRBkt _rpar_;

    public ABinaryminusRegexpart ()
    {
    }

    public ABinaryminusRegexpart (
            TLBkt _lpar_,
            PRegexpart _left_,
            TMinus _minus_,
            PRegexpart _right_,
            TRBkt _rpar_
    )
    {
        SetLpar (_lpar_);
        SetLeft (_left_);
        SetMinus (_minus_);
        SetRight (_right_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new ABinaryminusRegexpart (
            (TLBkt)CloneNode (_lpar_),
            (PRegexpart)CloneNode (_left_),
            (TMinus)CloneNode (_minus_),
            (PRegexpart)CloneNode (_right_),
            (TRBkt)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABinaryminusRegexpart(this);
    }

    public TLBkt GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBkt node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public PRegexpart GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PRegexpart node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PRegexpart GetRight ()
    {
        return _right_;
    }

    public void SetRight (PRegexpart node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }
    public TRBkt GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBkt node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_left_)
            + ToString (_minus_)
            + ToString (_right_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBkt) newChild);
            return;
        }
        if ( _left_ == oldChild )
        {
            SetLeft ((PRegexpart) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PRegexpart) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBkt) newChild);
            return;
        }
    }

}
public sealed class AIntervalRegexpart : PRegexpart
{
    private TLBkt _lpar_;
    private PRegexpart _left_;
    private TDDot _dots_;
    private PRegexpart _right_;
    private TRBkt _rpar_;

    public AIntervalRegexpart ()
    {
    }

    public AIntervalRegexpart (
            TLBkt _lpar_,
            PRegexpart _left_,
            TDDot _dots_,
            PRegexpart _right_,
            TRBkt _rpar_
    )
    {
        SetLpar (_lpar_);
        SetLeft (_left_);
        SetDots (_dots_);
        SetRight (_right_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new AIntervalRegexpart (
            (TLBkt)CloneNode (_lpar_),
            (PRegexpart)CloneNode (_left_),
            (TDDot)CloneNode (_dots_),
            (PRegexpart)CloneNode (_right_),
            (TRBkt)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntervalRegexpart(this);
    }

    public TLBkt GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBkt node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public PRegexpart GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PRegexpart node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TDDot GetDots ()
    {
        return _dots_;
    }

    public void SetDots (TDDot node)
    {
        if(_dots_ != null)
        {
            _dots_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dots_ = node;
    }
    public PRegexpart GetRight ()
    {
        return _right_;
    }

    public void SetRight (PRegexpart node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }
    public TRBkt GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBkt node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_left_)
            + ToString (_dots_)
            + ToString (_right_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _dots_ == child )
        {
            _dots_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBkt) newChild);
            return;
        }
        if ( _left_ == oldChild )
        {
            SetLeft ((PRegexpart) newChild);
            return;
        }
        if ( _dots_ == oldChild )
        {
            SetDots ((TDDot) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PRegexpart) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBkt) newChild);
            return;
        }
    }

}
public sealed class AStringRegexpart : PRegexpart
{
    private TString _string_;

    public AStringRegexpart ()
    {
    }

    public AStringRegexpart (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringRegexpart (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringRegexpart(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AIdentifierRegexpart : PRegexpart
{
    private TIdentifier _identifier_;

    public AIdentifierRegexpart ()
    {
    }

    public AIdentifierRegexpart (
            TIdentifier _identifier_
    )
    {
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new AIdentifierRegexpart (
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdentifierRegexpart(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AParenthesisRegexpart : PRegexpart
{
    private TLPar _lpar_;
    private PRegex _regex_;
    private TRPar _rpar_;

    public AParenthesisRegexpart ()
    {
    }

    public AParenthesisRegexpart (
            TLPar _lpar_,
            PRegex _regex_,
            TRPar _rpar_
    )
    {
        SetLpar (_lpar_);
        SetRegex (_regex_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new AParenthesisRegexpart (
            (TLPar)CloneNode (_lpar_),
            (PRegex)CloneNode (_regex_),
            (TRPar)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthesisRegexpart(this);
    }

    public TLPar GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLPar node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public PRegex GetRegex ()
    {
        return _regex_;
    }

    public void SetRegex (PRegex node)
    {
        if(_regex_ != null)
        {
            _regex_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _regex_ = node;
    }
    public TRPar GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRPar node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_regex_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _regex_ == child )
        {
            _regex_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLPar) newChild);
            return;
        }
        if ( _regex_ == oldChild )
        {
            SetRegex ((PRegex) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRPar) newChild);
            return;
        }
    }

}
public sealed class AStates : PStates
{
    private TStatestoken _statestoken_;
    private PList _list_;
    private TSemicolon _semicolon_;

    public AStates ()
    {
    }

    public AStates (
            TStatestoken _statestoken_,
            PList _list_,
            TSemicolon _semicolon_
    )
    {
        SetStatestoken (_statestoken_);
        SetList (_list_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AStates (
            (TStatestoken)CloneNode (_statestoken_),
            (PList)CloneNode (_list_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStates(this);
    }

    public TStatestoken GetStatestoken ()
    {
        return _statestoken_;
    }

    public void SetStatestoken (TStatestoken node)
    {
        if(_statestoken_ != null)
        {
            _statestoken_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statestoken_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statestoken_)
            + ToString (_list_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statestoken_ == child )
        {
            _statestoken_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statestoken_ == oldChild )
        {
            SetStatestoken ((TStatestoken) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AIgnoredtokens : PIgnoredtokens
{
    private TIgnoredtoken _ignoredtoken_;
    private TTokenstoken _tokenstoken_;
    private PList _list_;
    private TSemicolon _semicolon_;

    public AIgnoredtokens ()
    {
    }

    public AIgnoredtokens (
            TIgnoredtoken _ignoredtoken_,
            TTokenstoken _tokenstoken_,
            PList _list_,
            TSemicolon _semicolon_
    )
    {
        SetIgnoredtoken (_ignoredtoken_);
        SetTokenstoken (_tokenstoken_);
        SetList (_list_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AIgnoredtokens (
            (TIgnoredtoken)CloneNode (_ignoredtoken_),
            (TTokenstoken)CloneNode (_tokenstoken_),
            (PList)CloneNode (_list_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIgnoredtokens(this);
    }

    public TIgnoredtoken GetIgnoredtoken ()
    {
        return _ignoredtoken_;
    }

    public void SetIgnoredtoken (TIgnoredtoken node)
    {
        if(_ignoredtoken_ != null)
        {
            _ignoredtoken_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ignoredtoken_ = node;
    }
    public TTokenstoken GetTokenstoken ()
    {
        return _tokenstoken_;
    }

    public void SetTokenstoken (TTokenstoken node)
    {
        if(_tokenstoken_ != null)
        {
            _tokenstoken_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tokenstoken_ = node;
    }
    public PList GetList ()
    {
        return _list_;
    }

    public void SetList (PList node)
    {
        if(_list_ != null)
        {
            _list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _list_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ignoredtoken_)
            + ToString (_tokenstoken_)
            + ToString (_list_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ignoredtoken_ == child )
        {
            _ignoredtoken_ = null;
            return;
        }
        if ( _tokenstoken_ == child )
        {
            _tokenstoken_ = null;
            return;
        }
        if ( _list_ == child )
        {
            _list_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ignoredtoken_ == oldChild )
        {
            SetIgnoredtoken ((TIgnoredtoken) newChild);
            return;
        }
        if ( _tokenstoken_ == oldChild )
        {
            SetTokenstoken ((TTokenstoken) newChild);
            return;
        }
        if ( _list_ == oldChild )
        {
            SetList ((PList) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AIdentifierList : PList
{
    private TypedList _listitem_;

    public AIdentifierList ()
    {
        this._listitem_ = new TypedList(new Listitem_Cast(this));
    }

    public AIdentifierList (
            IList _listitem_
    )
    {
        this._listitem_ = new TypedList(new Listitem_Cast(this));
        this._listitem_.Clear();
        this._listitem_.AddAll(_listitem_);
    }

    public override Object Clone()
    {
        return new AIdentifierList (
            CloneList (_listitem_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdentifierList(this);
    }

    public IList GetListitem ()
    {
        return _listitem_;
    }

    public void setListitem (IList list)
    {
        _listitem_.Clear();
        _listitem_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_listitem_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _listitem_.Contains(child) )
        {
            _listitem_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _listitem_.Count; i++ )
        {
            Node n = (Node)_listitem_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _listitem_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _listitem_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Listitem_Cast : Cast
    {
        AIdentifierList obj;

        internal Listitem_Cast (AIdentifierList obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PListitem node = (PListitem) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PListitem node = (PListitem) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ATokenstateList : PList
{
    private TLBrace _lpar_;
    private TypedList _listitem_;
    private TRBrace _rpar_;

    public ATokenstateList ()
    {
        this._listitem_ = new TypedList(new Listitem_Cast(this));
    }

    public ATokenstateList (
            TLBrace _lpar_,
            IList _listitem_,
            TRBrace _rpar_
    )
    {
        SetLpar (_lpar_);
        this._listitem_ = new TypedList(new Listitem_Cast(this));
        this._listitem_.Clear();
        this._listitem_.AddAll(_listitem_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new ATokenstateList (
            (TLBrace)CloneNode (_lpar_),
            CloneList (_listitem_),
            (TRBrace)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATokenstateList(this);
    }

    public TLBrace GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBrace node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public IList GetListitem ()
    {
        return _listitem_;
    }

    public void setListitem (IList list)
    {
        _listitem_.Clear();
        _listitem_.AddAll(list);
    }
    public TRBrace GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBrace node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_listitem_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _listitem_.Contains(child) )
        {
            _listitem_.Remove(child);
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBrace) newChild);
            return;
        }
        for ( int i = 0; i < _listitem_.Count; i++ )
        {
            Node n = (Node)_listitem_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _listitem_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _listitem_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBrace) newChild);
            return;
        }
    }

    private class Listitem_Cast : Cast
    {
        ATokenstateList obj;

        internal Listitem_Cast (ATokenstateList obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PListitem node = (PListitem) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PListitem node = (PListitem) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ATranslationList : PList
{
    private TypedList _listitem_;

    public ATranslationList ()
    {
        this._listitem_ = new TypedList(new Listitem_Cast(this));
    }

    public ATranslationList (
            IList _listitem_
    )
    {
        this._listitem_ = new TypedList(new Listitem_Cast(this));
        this._listitem_.Clear();
        this._listitem_.AddAll(_listitem_);
    }

    public override Object Clone()
    {
        return new ATranslationList (
            CloneList (_listitem_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATranslationList(this);
    }

    public IList GetListitem ()
    {
        return _listitem_;
    }

    public void setListitem (IList list)
    {
        _listitem_.Clear();
        _listitem_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_listitem_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _listitem_.Contains(child) )
        {
            _listitem_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _listitem_.Count; i++ )
        {
            Node n = (Node)_listitem_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _listitem_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _listitem_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Listitem_Cast : Cast
    {
        ATranslationList obj;

        internal Listitem_Cast (ATranslationList obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PListitem node = (PListitem) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PListitem node = (PListitem) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AIdentifierListitem : PListitem
{
    private TComma _comma_;
    private TIdentifier _identifier_;

    public AIdentifierListitem ()
    {
    }

    public AIdentifierListitem (
            TComma _comma_,
            TIdentifier _identifier_
    )
    {
        SetComma (_comma_);
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new AIdentifierListitem (
            (TComma)CloneNode (_comma_),
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdentifierListitem(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class ATokenstateListitem : PListitem
{
    private TComma _comma_;
    private TIdentifier _identifier_;

    public ATokenstateListitem ()
    {
    }

    public ATokenstateListitem (
            TComma _comma_,
            TIdentifier _identifier_
    )
    {
        SetComma (_comma_);
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new ATokenstateListitem (
            (TComma)CloneNode (_comma_),
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATokenstateListitem(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class ATokenstatetransitionListitem : PListitem
{
    private TComma _comma_;
    private TIdentifier _from_;
    private TArrow _arrow_;
    private TIdentifier _to_;

    public ATokenstatetransitionListitem ()
    {
    }

    public ATokenstatetransitionListitem (
            TComma _comma_,
            TIdentifier _from_,
            TArrow _arrow_,
            TIdentifier _to_
    )
    {
        SetComma (_comma_);
        SetFrom (_from_);
        SetArrow (_arrow_);
        SetTo (_to_);
    }

    public override Object Clone()
    {
        return new ATokenstatetransitionListitem (
            (TComma)CloneNode (_comma_),
            (TIdentifier)CloneNode (_from_),
            (TArrow)CloneNode (_arrow_),
            (TIdentifier)CloneNode (_to_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATokenstatetransitionListitem(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TIdentifier GetFrom ()
    {
        return _from_;
    }

    public void SetFrom (TIdentifier node)
    {
        if(_from_ != null)
        {
            _from_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _from_ = node;
    }
    public TArrow GetArrow ()
    {
        return _arrow_;
    }

    public void SetArrow (TArrow node)
    {
        if(_arrow_ != null)
        {
            _arrow_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrow_ = node;
    }
    public TIdentifier GetTo ()
    {
        return _to_;
    }

    public void SetTo (TIdentifier node)
    {
        if(_to_ != null)
        {
            _to_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _to_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_from_)
            + ToString (_arrow_)
            + ToString (_to_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _from_ == child )
        {
            _from_ = null;
            return;
        }
        if ( _arrow_ == child )
        {
            _arrow_ = null;
            return;
        }
        if ( _to_ == child )
        {
            _to_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _from_ == oldChild )
        {
            SetFrom ((TIdentifier) newChild);
            return;
        }
        if ( _arrow_ == oldChild )
        {
            SetArrow ((TArrow) newChild);
            return;
        }
        if ( _to_ == oldChild )
        {
            SetTo ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class ATranslationListitem : PListitem
{
    private TComma _comma_;
    private PTranslation _translation_;

    public ATranslationListitem ()
    {
    }

    public ATranslationListitem (
            TComma _comma_,
            PTranslation _translation_
    )
    {
        SetComma (_comma_);
        SetTranslation (_translation_);
    }

    public override Object Clone()
    {
        return new ATranslationListitem (
            (TComma)CloneNode (_comma_),
            (PTranslation)CloneNode (_translation_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATranslationListitem(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PTranslation GetTranslation ()
    {
        return _translation_;
    }

    public void SetTranslation (PTranslation node)
    {
        if(_translation_ != null)
        {
            _translation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _translation_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_translation_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _translation_ == child )
        {
            _translation_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _translation_ == oldChild )
        {
            SetTranslation ((PTranslation) newChild);
            return;
        }
    }

}
public sealed class AProductions : PProductions
{
    private TProductionstoken _productionstoken_;
    private TypedList _productions_;

    public AProductions ()
    {
        this._productions_ = new TypedList(new Productions_Cast(this));
    }

    public AProductions (
            TProductionstoken _productionstoken_,
            IList _productions_
    )
    {
        SetProductionstoken (_productionstoken_);
        this._productions_ = new TypedList(new Productions_Cast(this));
        this._productions_.Clear();
        this._productions_.AddAll(_productions_);
    }

    public override Object Clone()
    {
        return new AProductions (
            (TProductionstoken)CloneNode (_productionstoken_),
            CloneList (_productions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProductions(this);
    }

    public TProductionstoken GetProductionstoken ()
    {
        return _productionstoken_;
    }

    public void SetProductionstoken (TProductionstoken node)
    {
        if(_productionstoken_ != null)
        {
            _productionstoken_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _productionstoken_ = node;
    }
    public IList GetProductions ()
    {
        return _productions_;
    }

    public void setProductions (IList list)
    {
        _productions_.Clear();
        _productions_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_productionstoken_)
            + ToString (_productions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _productionstoken_ == child )
        {
            _productionstoken_ = null;
            return;
        }
        if ( _productions_.Contains(child) )
        {
            _productions_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _productionstoken_ == oldChild )
        {
            SetProductionstoken ((TProductionstoken) newChild);
            return;
        }
        for ( int i = 0; i < _productions_.Count; i++ )
        {
            Node n = (Node)_productions_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _productions_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _productions_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Productions_Cast : Cast
    {
        AProductions obj;

        internal Productions_Cast (AProductions obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PProduction node = (PProduction) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PProduction node = (PProduction) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AAstproductions : PAstproductions
{
    private TAsttoken _asttoken_;
    private TypedList _productions_;

    public AAstproductions ()
    {
        this._productions_ = new TypedList(new Productions_Cast(this));
    }

    public AAstproductions (
            TAsttoken _asttoken_,
            IList _productions_
    )
    {
        SetAsttoken (_asttoken_);
        this._productions_ = new TypedList(new Productions_Cast(this));
        this._productions_.Clear();
        this._productions_.AddAll(_productions_);
    }

    public override Object Clone()
    {
        return new AAstproductions (
            (TAsttoken)CloneNode (_asttoken_),
            CloneList (_productions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAstproductions(this);
    }

    public TAsttoken GetAsttoken ()
    {
        return _asttoken_;
    }

    public void SetAsttoken (TAsttoken node)
    {
        if(_asttoken_ != null)
        {
            _asttoken_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _asttoken_ = node;
    }
    public IList GetProductions ()
    {
        return _productions_;
    }

    public void setProductions (IList list)
    {
        _productions_.Clear();
        _productions_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_asttoken_)
            + ToString (_productions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _asttoken_ == child )
        {
            _asttoken_ = null;
            return;
        }
        if ( _productions_.Contains(child) )
        {
            _productions_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _asttoken_ == oldChild )
        {
            SetAsttoken ((TAsttoken) newChild);
            return;
        }
        for ( int i = 0; i < _productions_.Count; i++ )
        {
            Node n = (Node)_productions_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _productions_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _productions_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Productions_Cast : Cast
    {
        AAstproductions obj;

        internal Productions_Cast (AAstproductions obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PProduction node = (PProduction) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PProduction node = (PProduction) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AProduction : PProduction
{
    private TIdentifier _identifier_;
    private PProdtranslation _prodtranslation_;
    private TEqual _equal_;
    private PProductionrule _productionrule_;
    private TSemicolon _semicolon_;

    public AProduction ()
    {
    }

    public AProduction (
            TIdentifier _identifier_,
            PProdtranslation _prodtranslation_,
            TEqual _equal_,
            PProductionrule _productionrule_,
            TSemicolon _semicolon_
    )
    {
        SetIdentifier (_identifier_);
        SetProdtranslation (_prodtranslation_);
        SetEqual (_equal_);
        SetProductionrule (_productionrule_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AProduction (
            (TIdentifier)CloneNode (_identifier_),
            (PProdtranslation)CloneNode (_prodtranslation_),
            (TEqual)CloneNode (_equal_),
            (PProductionrule)CloneNode (_productionrule_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProduction(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public PProdtranslation GetProdtranslation ()
    {
        return _prodtranslation_;
    }

    public void SetProdtranslation (PProdtranslation node)
    {
        if(_prodtranslation_ != null)
        {
            _prodtranslation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _prodtranslation_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PProductionrule GetProductionrule ()
    {
        return _productionrule_;
    }

    public void SetProductionrule (PProductionrule node)
    {
        if(_productionrule_ != null)
        {
            _productionrule_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _productionrule_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
            + ToString (_prodtranslation_)
            + ToString (_equal_)
            + ToString (_productionrule_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _prodtranslation_ == child )
        {
            _prodtranslation_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _productionrule_ == child )
        {
            _productionrule_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _prodtranslation_ == oldChild )
        {
            SetProdtranslation ((PProdtranslation) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _productionrule_ == oldChild )
        {
            SetProductionrule ((PProductionrule) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ACleanProdtranslation : PProdtranslation
{
    private TLBrace _lpar_;
    private TArrow _arrow_;
    private TIdentifier _identifier_;
    private TRBrace _rpar_;

    public ACleanProdtranslation ()
    {
    }

    public ACleanProdtranslation (
            TLBrace _lpar_,
            TArrow _arrow_,
            TIdentifier _identifier_,
            TRBrace _rpar_
    )
    {
        SetLpar (_lpar_);
        SetArrow (_arrow_);
        SetIdentifier (_identifier_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new ACleanProdtranslation (
            (TLBrace)CloneNode (_lpar_),
            (TArrow)CloneNode (_arrow_),
            (TIdentifier)CloneNode (_identifier_),
            (TRBrace)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACleanProdtranslation(this);
    }

    public TLBrace GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBrace node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public TArrow GetArrow ()
    {
        return _arrow_;
    }

    public void SetArrow (TArrow node)
    {
        if(_arrow_ != null)
        {
            _arrow_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrow_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TRBrace GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBrace node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_arrow_)
            + ToString (_identifier_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _arrow_ == child )
        {
            _arrow_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBrace) newChild);
            return;
        }
        if ( _arrow_ == oldChild )
        {
            SetArrow ((TArrow) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBrace) newChild);
            return;
        }
    }

}
public sealed class AStarProdtranslation : PProdtranslation
{
    private TLBrace _lpar_;
    private TArrow _arrow_;
    private TIdentifier _identifier_;
    private TStar _star_;
    private TRBrace _rpar_;

    public AStarProdtranslation ()
    {
    }

    public AStarProdtranslation (
            TLBrace _lpar_,
            TArrow _arrow_,
            TIdentifier _identifier_,
            TStar _star_,
            TRBrace _rpar_
    )
    {
        SetLpar (_lpar_);
        SetArrow (_arrow_);
        SetIdentifier (_identifier_);
        SetStar (_star_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new AStarProdtranslation (
            (TLBrace)CloneNode (_lpar_),
            (TArrow)CloneNode (_arrow_),
            (TIdentifier)CloneNode (_identifier_),
            (TStar)CloneNode (_star_),
            (TRBrace)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStarProdtranslation(this);
    }

    public TLBrace GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBrace node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public TArrow GetArrow ()
    {
        return _arrow_;
    }

    public void SetArrow (TArrow node)
    {
        if(_arrow_ != null)
        {
            _arrow_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrow_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TStar GetStar ()
    {
        return _star_;
    }

    public void SetStar (TStar node)
    {
        if(_star_ != null)
        {
            _star_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _star_ = node;
    }
    public TRBrace GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBrace node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_arrow_)
            + ToString (_identifier_)
            + ToString (_star_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _arrow_ == child )
        {
            _arrow_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _star_ == child )
        {
            _star_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBrace) newChild);
            return;
        }
        if ( _arrow_ == oldChild )
        {
            SetArrow ((TArrow) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _star_ == oldChild )
        {
            SetStar ((TStar) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBrace) newChild);
            return;
        }
    }

}
public sealed class APlusProdtranslation : PProdtranslation
{
    private TLBrace _lpar_;
    private TArrow _arrow_;
    private TIdentifier _identifier_;
    private TPlus _plus_;
    private TRBrace _rpar_;

    public APlusProdtranslation ()
    {
    }

    public APlusProdtranslation (
            TLBrace _lpar_,
            TArrow _arrow_,
            TIdentifier _identifier_,
            TPlus _plus_,
            TRBrace _rpar_
    )
    {
        SetLpar (_lpar_);
        SetArrow (_arrow_);
        SetIdentifier (_identifier_);
        SetPlus (_plus_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new APlusProdtranslation (
            (TLBrace)CloneNode (_lpar_),
            (TArrow)CloneNode (_arrow_),
            (TIdentifier)CloneNode (_identifier_),
            (TPlus)CloneNode (_plus_),
            (TRBrace)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusProdtranslation(this);
    }

    public TLBrace GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBrace node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public TArrow GetArrow ()
    {
        return _arrow_;
    }

    public void SetArrow (TArrow node)
    {
        if(_arrow_ != null)
        {
            _arrow_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrow_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public TRBrace GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBrace node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_arrow_)
            + ToString (_identifier_)
            + ToString (_plus_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _arrow_ == child )
        {
            _arrow_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBrace) newChild);
            return;
        }
        if ( _arrow_ == oldChild )
        {
            SetArrow ((TArrow) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBrace) newChild);
            return;
        }
    }

}
public sealed class AQuestionProdtranslation : PProdtranslation
{
    private TLBrace _lpar_;
    private TArrow _arrow_;
    private TIdentifier _identifier_;
    private TQMark _q_mark_;
    private TRBrace _rpar_;

    public AQuestionProdtranslation ()
    {
    }

    public AQuestionProdtranslation (
            TLBrace _lpar_,
            TArrow _arrow_,
            TIdentifier _identifier_,
            TQMark _q_mark_,
            TRBrace _rpar_
    )
    {
        SetLpar (_lpar_);
        SetArrow (_arrow_);
        SetIdentifier (_identifier_);
        SetQMark (_q_mark_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new AQuestionProdtranslation (
            (TLBrace)CloneNode (_lpar_),
            (TArrow)CloneNode (_arrow_),
            (TIdentifier)CloneNode (_identifier_),
            (TQMark)CloneNode (_q_mark_),
            (TRBrace)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAQuestionProdtranslation(this);
    }

    public TLBrace GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBrace node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public TArrow GetArrow ()
    {
        return _arrow_;
    }

    public void SetArrow (TArrow node)
    {
        if(_arrow_ != null)
        {
            _arrow_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrow_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TQMark GetQMark ()
    {
        return _q_mark_;
    }

    public void SetQMark (TQMark node)
    {
        if(_q_mark_ != null)
        {
            _q_mark_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _q_mark_ = node;
    }
    public TRBrace GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBrace node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_arrow_)
            + ToString (_identifier_)
            + ToString (_q_mark_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _arrow_ == child )
        {
            _arrow_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _q_mark_ == child )
        {
            _q_mark_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBrace) newChild);
            return;
        }
        if ( _arrow_ == oldChild )
        {
            SetArrow ((TArrow) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _q_mark_ == oldChild )
        {
            SetQMark ((TQMark) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBrace) newChild);
            return;
        }
    }

}
public sealed class AFullTranslation : PTranslation
{
    private TLBrace _lpar_;
    private TArrow _arrow_;
    private PTranslation _translation_;
    private TRBrace _rpar_;

    public AFullTranslation ()
    {
    }

    public AFullTranslation (
            TLBrace _lpar_,
            TArrow _arrow_,
            PTranslation _translation_,
            TRBrace _rpar_
    )
    {
        SetLpar (_lpar_);
        SetArrow (_arrow_);
        SetTranslation (_translation_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new AFullTranslation (
            (TLBrace)CloneNode (_lpar_),
            (TArrow)CloneNode (_arrow_),
            (PTranslation)CloneNode (_translation_),
            (TRBrace)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFullTranslation(this);
    }

    public TLBrace GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBrace node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public TArrow GetArrow ()
    {
        return _arrow_;
    }

    public void SetArrow (TArrow node)
    {
        if(_arrow_ != null)
        {
            _arrow_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrow_ = node;
    }
    public PTranslation GetTranslation ()
    {
        return _translation_;
    }

    public void SetTranslation (PTranslation node)
    {
        if(_translation_ != null)
        {
            _translation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _translation_ = node;
    }
    public TRBrace GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBrace node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_arrow_)
            + ToString (_translation_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _arrow_ == child )
        {
            _arrow_ = null;
            return;
        }
        if ( _translation_ == child )
        {
            _translation_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBrace) newChild);
            return;
        }
        if ( _arrow_ == oldChild )
        {
            SetArrow ((TArrow) newChild);
            return;
        }
        if ( _translation_ == oldChild )
        {
            SetTranslation ((PTranslation) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBrace) newChild);
            return;
        }
    }

}
public sealed class ANewTranslation : PTranslation
{
    private TNew _new_;
    private TIdentifier _production_;
    private TLPar _lpar_;
    private PList _arguments_;
    private TRPar _rpar_;

    public ANewTranslation ()
    {
    }

    public ANewTranslation (
            TNew _new_,
            TIdentifier _production_,
            TLPar _lpar_,
            PList _arguments_,
            TRPar _rpar_
    )
    {
        SetNew (_new_);
        SetProduction (_production_);
        SetLpar (_lpar_);
        SetArguments (_arguments_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new ANewTranslation (
            (TNew)CloneNode (_new_),
            (TIdentifier)CloneNode (_production_),
            (TLPar)CloneNode (_lpar_),
            (PList)CloneNode (_arguments_),
            (TRPar)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANewTranslation(this);
    }

    public TNew GetNew ()
    {
        return _new_;
    }

    public void SetNew (TNew node)
    {
        if(_new_ != null)
        {
            _new_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _new_ = node;
    }
    public TIdentifier GetProduction ()
    {
        return _production_;
    }

    public void SetProduction (TIdentifier node)
    {
        if(_production_ != null)
        {
            _production_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _production_ = node;
    }
    public TLPar GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLPar node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public PList GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PList node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }
    public TRPar GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRPar node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_new_)
            + ToString (_production_)
            + ToString (_lpar_)
            + ToString (_arguments_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _new_ == child )
        {
            _new_ = null;
            return;
        }
        if ( _production_ == child )
        {
            _production_ = null;
            return;
        }
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _new_ == oldChild )
        {
            SetNew ((TNew) newChild);
            return;
        }
        if ( _production_ == oldChild )
        {
            SetProduction ((TIdentifier) newChild);
            return;
        }
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLPar) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PList) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRPar) newChild);
            return;
        }
    }

}
public sealed class ANewalternativeTranslation : PTranslation
{
    private TNew _new_;
    private TIdentifier _production_;
    private TDot _dot_;
    private TIdentifier _alternative_;
    private TLPar _lpar_;
    private PList _arguments_;
    private TRPar _rpar_;

    public ANewalternativeTranslation ()
    {
    }

    public ANewalternativeTranslation (
            TNew _new_,
            TIdentifier _production_,
            TDot _dot_,
            TIdentifier _alternative_,
            TLPar _lpar_,
            PList _arguments_,
            TRPar _rpar_
    )
    {
        SetNew (_new_);
        SetProduction (_production_);
        SetDot (_dot_);
        SetAlternative (_alternative_);
        SetLpar (_lpar_);
        SetArguments (_arguments_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new ANewalternativeTranslation (
            (TNew)CloneNode (_new_),
            (TIdentifier)CloneNode (_production_),
            (TDot)CloneNode (_dot_),
            (TIdentifier)CloneNode (_alternative_),
            (TLPar)CloneNode (_lpar_),
            (PList)CloneNode (_arguments_),
            (TRPar)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANewalternativeTranslation(this);
    }

    public TNew GetNew ()
    {
        return _new_;
    }

    public void SetNew (TNew node)
    {
        if(_new_ != null)
        {
            _new_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _new_ = node;
    }
    public TIdentifier GetProduction ()
    {
        return _production_;
    }

    public void SetProduction (TIdentifier node)
    {
        if(_production_ != null)
        {
            _production_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _production_ = node;
    }
    public TDot GetDot ()
    {
        return _dot_;
    }

    public void SetDot (TDot node)
    {
        if(_dot_ != null)
        {
            _dot_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dot_ = node;
    }
    public TIdentifier GetAlternative ()
    {
        return _alternative_;
    }

    public void SetAlternative (TIdentifier node)
    {
        if(_alternative_ != null)
        {
            _alternative_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _alternative_ = node;
    }
    public TLPar GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLPar node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public PList GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PList node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }
    public TRPar GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRPar node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_new_)
            + ToString (_production_)
            + ToString (_dot_)
            + ToString (_alternative_)
            + ToString (_lpar_)
            + ToString (_arguments_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _new_ == child )
        {
            _new_ = null;
            return;
        }
        if ( _production_ == child )
        {
            _production_ = null;
            return;
        }
        if ( _dot_ == child )
        {
            _dot_ = null;
            return;
        }
        if ( _alternative_ == child )
        {
            _alternative_ = null;
            return;
        }
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _new_ == oldChild )
        {
            SetNew ((TNew) newChild);
            return;
        }
        if ( _production_ == oldChild )
        {
            SetProduction ((TIdentifier) newChild);
            return;
        }
        if ( _dot_ == oldChild )
        {
            SetDot ((TDot) newChild);
            return;
        }
        if ( _alternative_ == oldChild )
        {
            SetAlternative ((TIdentifier) newChild);
            return;
        }
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLPar) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PList) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRPar) newChild);
            return;
        }
    }

}
public sealed class AListTranslation : PTranslation
{
    private TLBkt _lpar_;
    private PList _elements_;
    private TRBkt _rpar_;

    public AListTranslation ()
    {
    }

    public AListTranslation (
            TLBkt _lpar_,
            PList _elements_,
            TRBkt _rpar_
    )
    {
        SetLpar (_lpar_);
        SetElements (_elements_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new AListTranslation (
            (TLBkt)CloneNode (_lpar_),
            (PList)CloneNode (_elements_),
            (TRBkt)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAListTranslation(this);
    }

    public TLBkt GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBkt node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public PList GetElements ()
    {
        return _elements_;
    }

    public void SetElements (PList node)
    {
        if(_elements_ != null)
        {
            _elements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elements_ = node;
    }
    public TRBkt GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBkt node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_elements_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _elements_ == child )
        {
            _elements_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBkt) newChild);
            return;
        }
        if ( _elements_ == oldChild )
        {
            SetElements ((PList) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBkt) newChild);
            return;
        }
    }

}
public sealed class ANullTranslation : PTranslation
{
    private TNull _null_;

    public ANullTranslation ()
    {
    }

    public ANullTranslation (
            TNull _null_
    )
    {
        SetNull (_null_);
    }

    public override Object Clone()
    {
        return new ANullTranslation (
            (TNull)CloneNode (_null_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANullTranslation(this);
    }

    public TNull GetNull ()
    {
        return _null_;
    }

    public void SetNull (TNull node)
    {
        if(_null_ != null)
        {
            _null_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _null_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_null_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _null_ == child )
        {
            _null_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _null_ == oldChild )
        {
            SetNull ((TNull) newChild);
            return;
        }
    }

}
public sealed class AIdTranslation : PTranslation
{
    private TIdentifier _identifier_;

    public AIdTranslation ()
    {
    }

    public AIdTranslation (
            TIdentifier _identifier_
    )
    {
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new AIdTranslation (
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdTranslation(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AIddotidTranslation : PTranslation
{
    private TIdentifier _identifier_;
    private TDot _dot_;
    private TIdentifier _production_;

    public AIddotidTranslation ()
    {
    }

    public AIddotidTranslation (
            TIdentifier _identifier_,
            TDot _dot_,
            TIdentifier _production_
    )
    {
        SetIdentifier (_identifier_);
        SetDot (_dot_);
        SetProduction (_production_);
    }

    public override Object Clone()
    {
        return new AIddotidTranslation (
            (TIdentifier)CloneNode (_identifier_),
            (TDot)CloneNode (_dot_),
            (TIdentifier)CloneNode (_production_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIddotidTranslation(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TDot GetDot ()
    {
        return _dot_;
    }

    public void SetDot (TDot node)
    {
        if(_dot_ != null)
        {
            _dot_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dot_ = node;
    }
    public TIdentifier GetProduction ()
    {
        return _production_;
    }

    public void SetProduction (TIdentifier node)
    {
        if(_production_ != null)
        {
            _production_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _production_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
            + ToString (_dot_)
            + ToString (_production_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _dot_ == child )
        {
            _dot_ = null;
            return;
        }
        if ( _production_ == child )
        {
            _production_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _dot_ == oldChild )
        {
            SetDot ((TDot) newChild);
            return;
        }
        if ( _production_ == oldChild )
        {
            SetProduction ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AProductionrule : PProductionrule
{
    private TypedList _alternatives_;

    public AProductionrule ()
    {
        this._alternatives_ = new TypedList(new Alternatives_Cast(this));
    }

    public AProductionrule (
            IList _alternatives_
    )
    {
        this._alternatives_ = new TypedList(new Alternatives_Cast(this));
        this._alternatives_.Clear();
        this._alternatives_.AddAll(_alternatives_);
    }

    public override Object Clone()
    {
        return new AProductionrule (
            CloneList (_alternatives_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProductionrule(this);
    }

    public IList GetAlternatives ()
    {
        return _alternatives_;
    }

    public void setAlternatives (IList list)
    {
        _alternatives_.Clear();
        _alternatives_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_alternatives_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _alternatives_.Contains(child) )
        {
            _alternatives_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _alternatives_.Count; i++ )
        {
            Node n = (Node)_alternatives_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _alternatives_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _alternatives_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Alternatives_Cast : Cast
    {
        AProductionrule obj;

        internal Alternatives_Cast (AProductionrule obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PAlternative node = (PAlternative) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PAlternative node = (PAlternative) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AAlternative : PAlternative
{
    private TPipe _pipe_;
    private PAlternativename _alternativename_;
    private PElements _elements_;
    private PTranslation _translation_;

    public AAlternative ()
    {
    }

    public AAlternative (
            TPipe _pipe_,
            PAlternativename _alternativename_,
            PElements _elements_,
            PTranslation _translation_
    )
    {
        SetPipe (_pipe_);
        SetAlternativename (_alternativename_);
        SetElements (_elements_);
        SetTranslation (_translation_);
    }

    public override Object Clone()
    {
        return new AAlternative (
            (TPipe)CloneNode (_pipe_),
            (PAlternativename)CloneNode (_alternativename_),
            (PElements)CloneNode (_elements_),
            (PTranslation)CloneNode (_translation_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAlternative(this);
    }

    public TPipe GetPipe ()
    {
        return _pipe_;
    }

    public void SetPipe (TPipe node)
    {
        if(_pipe_ != null)
        {
            _pipe_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _pipe_ = node;
    }
    public PAlternativename GetAlternativename ()
    {
        return _alternativename_;
    }

    public void SetAlternativename (PAlternativename node)
    {
        if(_alternativename_ != null)
        {
            _alternativename_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _alternativename_ = node;
    }
    public PElements GetElements ()
    {
        return _elements_;
    }

    public void SetElements (PElements node)
    {
        if(_elements_ != null)
        {
            _elements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elements_ = node;
    }
    public PTranslation GetTranslation ()
    {
        return _translation_;
    }

    public void SetTranslation (PTranslation node)
    {
        if(_translation_ != null)
        {
            _translation_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _translation_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_pipe_)
            + ToString (_alternativename_)
            + ToString (_elements_)
            + ToString (_translation_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _pipe_ == child )
        {
            _pipe_ = null;
            return;
        }
        if ( _alternativename_ == child )
        {
            _alternativename_ = null;
            return;
        }
        if ( _elements_ == child )
        {
            _elements_ = null;
            return;
        }
        if ( _translation_ == child )
        {
            _translation_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _pipe_ == oldChild )
        {
            SetPipe ((TPipe) newChild);
            return;
        }
        if ( _alternativename_ == oldChild )
        {
            SetAlternativename ((PAlternativename) newChild);
            return;
        }
        if ( _elements_ == oldChild )
        {
            SetElements ((PElements) newChild);
            return;
        }
        if ( _translation_ == oldChild )
        {
            SetTranslation ((PTranslation) newChild);
            return;
        }
    }

}
public sealed class AAlternativename : PAlternativename
{
    private TLBrace _lpar_;
    private TIdentifier _name_;
    private TRBrace _rpar_;

    public AAlternativename ()
    {
    }

    public AAlternativename (
            TLBrace _lpar_,
            TIdentifier _name_,
            TRBrace _rpar_
    )
    {
        SetLpar (_lpar_);
        SetName (_name_);
        SetRpar (_rpar_);
    }

    public override Object Clone()
    {
        return new AAlternativename (
            (TLBrace)CloneNode (_lpar_),
            (TIdentifier)CloneNode (_name_),
            (TRBrace)CloneNode (_rpar_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAlternativename(this);
    }

    public TLBrace GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBrace node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public TRBrace GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBrace node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_name_)
            + ToString (_rpar_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBrace) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBrace) newChild);
            return;
        }
    }

}
public sealed class AElements : PElements
{
    private TypedList _element_;

    public AElements ()
    {
        this._element_ = new TypedList(new Element_Cast(this));
    }

    public AElements (
            IList _element_
    )
    {
        this._element_ = new TypedList(new Element_Cast(this));
        this._element_.Clear();
        this._element_.AddAll(_element_);
    }

    public override Object Clone()
    {
        return new AElements (
            CloneList (_element_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElements(this);
    }

    public IList GetElement ()
    {
        return _element_;
    }

    public void setElement (IList list)
    {
        _element_.Clear();
        _element_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_element_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _element_.Contains(child) )
        {
            _element_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _element_.Count; i++ )
        {
            Node n = (Node)_element_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _element_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _element_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Element_Cast : Cast
    {
        AElements obj;

        internal Element_Cast (AElements obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PElement node = (PElement) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PElement node = (PElement) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed partial class ASimpleElement : PElement
{
    private PElementname _elementname_;
    private PElementid _elementid_;

    public ASimpleElement ()
    {
    }

    public ASimpleElement (
            PElementname _elementname_,
            PElementid _elementid_
    )
    {
        SetElementname (_elementname_);
        SetElementid (_elementid_);
    }

    public override Object Clone()
    {
        return new ASimpleElement (
            (PElementname)CloneNode (_elementname_),
            (PElementid)CloneNode (_elementid_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASimpleElement(this);
    }

    public PElementname GetElementname ()
    {
        return _elementname_;
    }

    public void SetElementname (PElementname node)
    {
        if(_elementname_ != null)
        {
            _elementname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elementname_ = node;
    }
    public PElementid GetElementid ()
    {
        return _elementid_;
    }

    public void SetElementid (PElementid node)
    {
        if(_elementid_ != null)
        {
            _elementid_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elementid_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_elementname_)
            + ToString (_elementid_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _elementname_ == child )
        {
            _elementname_ = null;
            return;
        }
        if ( _elementid_ == child )
        {
            _elementid_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _elementname_ == oldChild )
        {
            SetElementname ((PElementname) newChild);
            return;
        }
        if ( _elementid_ == oldChild )
        {
            SetElementid ((PElementid) newChild);
            return;
        }
    }

}
public sealed partial class AStarElement : PElement
{
    private PElementname _elementname_;
    private PElementid _elementid_;
    private TStar _star_;

    public AStarElement ()
    {
    }

    public AStarElement (
            PElementname _elementname_,
            PElementid _elementid_,
            TStar _star_
    )
    {
        SetElementname (_elementname_);
        SetElementid (_elementid_);
        SetStar (_star_);
    }

    public override Object Clone()
    {
        return new AStarElement (
            (PElementname)CloneNode (_elementname_),
            (PElementid)CloneNode (_elementid_),
            (TStar)CloneNode (_star_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStarElement(this);
    }

    public PElementname GetElementname ()
    {
        return _elementname_;
    }

    public void SetElementname (PElementname node)
    {
        if(_elementname_ != null)
        {
            _elementname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elementname_ = node;
    }
    public PElementid GetElementid ()
    {
        return _elementid_;
    }

    public void SetElementid (PElementid node)
    {
        if(_elementid_ != null)
        {
            _elementid_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elementid_ = node;
    }
    public TStar GetStar ()
    {
        return _star_;
    }

    public void SetStar (TStar node)
    {
        if(_star_ != null)
        {
            _star_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _star_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_elementname_)
            + ToString (_elementid_)
            + ToString (_star_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _elementname_ == child )
        {
            _elementname_ = null;
            return;
        }
        if ( _elementid_ == child )
        {
            _elementid_ = null;
            return;
        }
        if ( _star_ == child )
        {
            _star_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _elementname_ == oldChild )
        {
            SetElementname ((PElementname) newChild);
            return;
        }
        if ( _elementid_ == oldChild )
        {
            SetElementid ((PElementid) newChild);
            return;
        }
        if ( _star_ == oldChild )
        {
            SetStar ((TStar) newChild);
            return;
        }
    }

}
public sealed partial class AQuestionElement : PElement
{
    private PElementname _elementname_;
    private PElementid _elementid_;
    private TQMark _q_mark_;

    public AQuestionElement ()
    {
    }

    public AQuestionElement (
            PElementname _elementname_,
            PElementid _elementid_,
            TQMark _q_mark_
    )
    {
        SetElementname (_elementname_);
        SetElementid (_elementid_);
        SetQMark (_q_mark_);
    }

    public override Object Clone()
    {
        return new AQuestionElement (
            (PElementname)CloneNode (_elementname_),
            (PElementid)CloneNode (_elementid_),
            (TQMark)CloneNode (_q_mark_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAQuestionElement(this);
    }

    public PElementname GetElementname ()
    {
        return _elementname_;
    }

    public void SetElementname (PElementname node)
    {
        if(_elementname_ != null)
        {
            _elementname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elementname_ = node;
    }
    public PElementid GetElementid ()
    {
        return _elementid_;
    }

    public void SetElementid (PElementid node)
    {
        if(_elementid_ != null)
        {
            _elementid_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elementid_ = node;
    }
    public TQMark GetQMark ()
    {
        return _q_mark_;
    }

    public void SetQMark (TQMark node)
    {
        if(_q_mark_ != null)
        {
            _q_mark_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _q_mark_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_elementname_)
            + ToString (_elementid_)
            + ToString (_q_mark_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _elementname_ == child )
        {
            _elementname_ = null;
            return;
        }
        if ( _elementid_ == child )
        {
            _elementid_ = null;
            return;
        }
        if ( _q_mark_ == child )
        {
            _q_mark_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _elementname_ == oldChild )
        {
            SetElementname ((PElementname) newChild);
            return;
        }
        if ( _elementid_ == oldChild )
        {
            SetElementid ((PElementid) newChild);
            return;
        }
        if ( _q_mark_ == oldChild )
        {
            SetQMark ((TQMark) newChild);
            return;
        }
    }

}
public sealed partial class APlusElement : PElement
{
    private PElementname _elementname_;
    private PElementid _elementid_;
    private TPlus _plus_;

    public APlusElement ()
    {
    }

    public APlusElement (
            PElementname _elementname_,
            PElementid _elementid_,
            TPlus _plus_
    )
    {
        SetElementname (_elementname_);
        SetElementid (_elementid_);
        SetPlus (_plus_);
    }

    public override Object Clone()
    {
        return new APlusElement (
            (PElementname)CloneNode (_elementname_),
            (PElementid)CloneNode (_elementid_),
            (TPlus)CloneNode (_plus_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusElement(this);
    }

    public PElementname GetElementname ()
    {
        return _elementname_;
    }

    public void SetElementname (PElementname node)
    {
        if(_elementname_ != null)
        {
            _elementname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elementname_ = node;
    }
    public PElementid GetElementid ()
    {
        return _elementid_;
    }

    public void SetElementid (PElementid node)
    {
        if(_elementid_ != null)
        {
            _elementid_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elementid_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_elementname_)
            + ToString (_elementid_)
            + ToString (_plus_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _elementname_ == child )
        {
            _elementname_ = null;
            return;
        }
        if ( _elementid_ == child )
        {
            _elementid_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _elementname_ == oldChild )
        {
            SetElementname ((PElementname) newChild);
            return;
        }
        if ( _elementid_ == oldChild )
        {
            SetElementid ((PElementid) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
    }

}
public sealed class AElementname : PElementname
{
    private TLBkt _lpar_;
    private TIdentifier _name_;
    private TRBkt _rpar_;
    private TColon _colon_;

    public AElementname ()
    {
    }

    public AElementname (
            TLBkt _lpar_,
            TIdentifier _name_,
            TRBkt _rpar_,
            TColon _colon_
    )
    {
        SetLpar (_lpar_);
        SetName (_name_);
        SetRpar (_rpar_);
        SetColon (_colon_);
    }

    public override Object Clone()
    {
        return new AElementname (
            (TLBkt)CloneNode (_lpar_),
            (TIdentifier)CloneNode (_name_),
            (TRBkt)CloneNode (_rpar_),
            (TColon)CloneNode (_colon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElementname(this);
    }

    public TLBkt GetLpar ()
    {
        return _lpar_;
    }

    public void SetLpar (TLBkt node)
    {
        if(_lpar_ != null)
        {
            _lpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lpar_ = node;
    }
    public TIdentifier GetName ()
    {
        return _name_;
    }

    public void SetName (TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public TRBkt GetRpar ()
    {
        return _rpar_;
    }

    public void SetRpar (TRBkt node)
    {
        if(_rpar_ != null)
        {
            _rpar_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rpar_ = node;
    }
    public TColon GetColon ()
    {
        return _colon_;
    }

    public void SetColon (TColon node)
    {
        if(_colon_ != null)
        {
            _colon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _colon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lpar_)
            + ToString (_name_)
            + ToString (_rpar_)
            + ToString (_colon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lpar_ == child )
        {
            _lpar_ = null;
            return;
        }
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _rpar_ == child )
        {
            _rpar_ = null;
            return;
        }
        if ( _colon_ == child )
        {
            _colon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lpar_ == oldChild )
        {
            SetLpar ((TLBkt) newChild);
            return;
        }
        if ( _name_ == oldChild )
        {
            SetName ((TIdentifier) newChild);
            return;
        }
        if ( _rpar_ == oldChild )
        {
            SetRpar ((TRBkt) newChild);
            return;
        }
        if ( _colon_ == oldChild )
        {
            SetColon ((TColon) newChild);
            return;
        }
    }

}
public sealed partial class ACleanElementid : PElementid
{
    private TIdentifier _identifier_;

    public ACleanElementid ()
    {
    }

    public ACleanElementid (
            TIdentifier _identifier_
    )
    {
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new ACleanElementid (
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACleanElementid(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed partial class ATokenElementid : PElementid
{
    private TTokenSpecifier _token_specifier_;
    private TDot _dot_;
    private TIdentifier _identifier_;

    public ATokenElementid ()
    {
    }

    public ATokenElementid (
            TTokenSpecifier _token_specifier_,
            TDot _dot_,
            TIdentifier _identifier_
    )
    {
        SetTokenSpecifier (_token_specifier_);
        SetDot (_dot_);
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new ATokenElementid (
            (TTokenSpecifier)CloneNode (_token_specifier_),
            (TDot)CloneNode (_dot_),
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATokenElementid(this);
    }

    public TTokenSpecifier GetTokenSpecifier ()
    {
        return _token_specifier_;
    }

    public void SetTokenSpecifier (TTokenSpecifier node)
    {
        if(_token_specifier_ != null)
        {
            _token_specifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _token_specifier_ = node;
    }
    public TDot GetDot ()
    {
        return _dot_;
    }

    public void SetDot (TDot node)
    {
        if(_dot_ != null)
        {
            _dot_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dot_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_specifier_)
            + ToString (_dot_)
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_specifier_ == child )
        {
            _token_specifier_ = null;
            return;
        }
        if ( _dot_ == child )
        {
            _dot_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _token_specifier_ == oldChild )
        {
            SetTokenSpecifier ((TTokenSpecifier) newChild);
            return;
        }
        if ( _dot_ == oldChild )
        {
            SetDot ((TDot) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed partial class AProductionElementid : PElementid
{
    private TProductionSpecifier _production_specifier_;
    private TDot _dot_;
    private TIdentifier _identifier_;

    public AProductionElementid ()
    {
    }

    public AProductionElementid (
            TProductionSpecifier _production_specifier_,
            TDot _dot_,
            TIdentifier _identifier_
    )
    {
        SetProductionSpecifier (_production_specifier_);
        SetDot (_dot_);
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new AProductionElementid (
            (TProductionSpecifier)CloneNode (_production_specifier_),
            (TDot)CloneNode (_dot_),
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProductionElementid(this);
    }

    public TProductionSpecifier GetProductionSpecifier ()
    {
        return _production_specifier_;
    }

    public void SetProductionSpecifier (TProductionSpecifier node)
    {
        if(_production_specifier_ != null)
        {
            _production_specifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _production_specifier_ = node;
    }
    public TDot GetDot ()
    {
        return _dot_;
    }

    public void SetDot (TDot node)
    {
        if(_dot_ != null)
        {
            _dot_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dot_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_production_specifier_)
            + ToString (_dot_)
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _production_specifier_ == child )
        {
            _production_specifier_ = null;
            return;
        }
        if ( _dot_ == child )
        {
            _dot_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _production_specifier_ == oldChild )
        {
            SetProductionSpecifier ((TProductionSpecifier) newChild);
            return;
        }
        if ( _dot_ == oldChild )
        {
            SetDot ((TDot) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PGrammar _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PGrammar _base_,
        EOF _eof_)
    {
        SetPGrammar(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PGrammar) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PGrammar GetPGrammar()
    {
        return _base_;
    }
    public void SetPGrammar(PGrammar node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPGrammar((PGrammar) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
