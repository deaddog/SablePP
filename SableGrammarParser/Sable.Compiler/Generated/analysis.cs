/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using Sable.Compiler.node;

namespace Sable.Compiler.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAGrammar(AGrammar node);
    void CaseAPackage(APackage node);
    void CaseAHelpers(AHelpers node);
    void CaseAHelper(AHelper node);
    void CaseATokens(ATokens node);
    void CaseAToken(AToken node);
    void CaseATokenlookahead(ATokenlookahead node);
    void CaseARegex(ARegex node);
    void CaseARegexOrpart(ARegexOrpart node);
    void CaseACharRegexpart(ACharRegexpart node);
    void CaseADecRegexpart(ADecRegexpart node);
    void CaseAHexRegexpart(AHexRegexpart node);
    void CaseAUnarystarRegexpart(AUnarystarRegexpart node);
    void CaseAUnaryquestionRegexpart(AUnaryquestionRegexpart node);
    void CaseAUnaryplusRegexpart(AUnaryplusRegexpart node);
    void CaseABinaryplusRegexpart(ABinaryplusRegexpart node);
    void CaseABinaryminusRegexpart(ABinaryminusRegexpart node);
    void CaseAIntervalRegexpart(AIntervalRegexpart node);
    void CaseAStringRegexpart(AStringRegexpart node);
    void CaseAIdentifierRegexpart(AIdentifierRegexpart node);
    void CaseAParenthesisRegexpart(AParenthesisRegexpart node);
    void CaseAStates(AStates node);
    void CaseAIgnoredtokens(AIgnoredtokens node);
    void CaseAIdentifierList(AIdentifierList node);
    void CaseATokenstateList(ATokenstateList node);
    void CaseATranslationList(ATranslationList node);
    void CaseAIdentifierListitem(AIdentifierListitem node);
    void CaseATokenstateListitem(ATokenstateListitem node);
    void CaseATokenstatetransitionListitem(ATokenstatetransitionListitem node);
    void CaseATranslationListitem(ATranslationListitem node);
    void CaseAProductions(AProductions node);
    void CaseAAstproductions(AAstproductions node);
    void CaseAProduction(AProduction node);
    void CaseACleanProdtranslation(ACleanProdtranslation node);
    void CaseAStarProdtranslation(AStarProdtranslation node);
    void CaseAPlusProdtranslation(APlusProdtranslation node);
    void CaseAQuestionProdtranslation(AQuestionProdtranslation node);
    void CaseAFullTranslation(AFullTranslation node);
    void CaseANewTranslation(ANewTranslation node);
    void CaseANewalternativeTranslation(ANewalternativeTranslation node);
    void CaseAListTranslation(AListTranslation node);
    void CaseANullTranslation(ANullTranslation node);
    void CaseAIdTranslation(AIdTranslation node);
    void CaseAIddotidTranslation(AIddotidTranslation node);
    void CaseAProductionrule(AProductionrule node);
    void CaseAAlternative(AAlternative node);
    void CaseAAlternativename(AAlternativename node);
    void CaseAElements(AElements node);
    void CaseASimpleElement(ASimpleElement node);
    void CaseAStarElement(AStarElement node);
    void CaseAQuestionElement(AQuestionElement node);
    void CaseAPlusElement(APlusElement node);
    void CaseAElementname(AElementname node);
    void CaseACleanElementid(ACleanElementid node);
    void CaseATokenElementid(ATokenElementid node);
    void CaseAProductionElementid(AProductionElementid node);

    void CaseTPackagename(TPackagename node);
    void CaseTPackagetoken(TPackagetoken node);
    void CaseTStatestoken(TStatestoken node);
    void CaseTHelperstoken(THelperstoken node);
    void CaseTTokenstoken(TTokenstoken node);
    void CaseTIgnoredtoken(TIgnoredtoken node);
    void CaseTProductionstoken(TProductionstoken node);
    void CaseTAsttoken(TAsttoken node);
    void CaseTNew(TNew node);
    void CaseTNull(TNull node);
    void CaseTTokenSpecifier(TTokenSpecifier node);
    void CaseTProductionSpecifier(TProductionSpecifier node);
    void CaseTDot(TDot node);
    void CaseTDDot(TDDot node);
    void CaseTSemicolon(TSemicolon node);
    void CaseTEqual(TEqual node);
    void CaseTLBkt(TLBkt node);
    void CaseTRBkt(TRBkt node);
    void CaseTLPar(TLPar node);
    void CaseTRPar(TRPar node);
    void CaseTLBrace(TLBrace node);
    void CaseTRBrace(TRBrace node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTQMark(TQMark node);
    void CaseTStar(TStar node);
    void CaseTPipe(TPipe node);
    void CaseTComma(TComma node);
    void CaseTSlash(TSlash node);
    void CaseTArrow(TArrow node);
    void CaseTColon(TColon node);
    void CaseTIdentifier(TIdentifier node);
    void CaseTCharacter(TCharacter node);
    void CaseTDecChar(TDecChar node);
    void CaseTHexChar(THexChar node);
    void CaseTString(TString node);
    void CaseTBlank(TBlank node);
    void CaseTComment(TComment node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAGrammar(AGrammar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPackage(APackage node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHelpers(AHelpers node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHelper(AHelper node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATokens(ATokens node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAToken(AToken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATokenlookahead(ATokenlookahead node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARegex(ARegex node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARegexOrpart(ARegexOrpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACharRegexpart(ACharRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADecRegexpart(ADecRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHexRegexpart(AHexRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUnarystarRegexpart(AUnarystarRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUnaryquestionRegexpart(AUnaryquestionRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUnaryplusRegexpart(AUnaryplusRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABinaryplusRegexpart(ABinaryplusRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABinaryminusRegexpart(ABinaryminusRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntervalRegexpart(AIntervalRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringRegexpart(AStringRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdentifierRegexpart(AIdentifierRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthesisRegexpart(AParenthesisRegexpart node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStates(AStates node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIgnoredtokens(AIgnoredtokens node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdentifierList(AIdentifierList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATokenstateList(ATokenstateList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATranslationList(ATranslationList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdentifierListitem(AIdentifierListitem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATokenstateListitem(ATokenstateListitem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATokenstatetransitionListitem(ATokenstatetransitionListitem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATranslationListitem(ATranslationListitem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProductions(AProductions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAstproductions(AAstproductions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProduction(AProduction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACleanProdtranslation(ACleanProdtranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStarProdtranslation(AStarProdtranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusProdtranslation(APlusProdtranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAQuestionProdtranslation(AQuestionProdtranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFullTranslation(AFullTranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANewTranslation(ANewTranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANewalternativeTranslation(ANewalternativeTranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAListTranslation(AListTranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANullTranslation(ANullTranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdTranslation(AIdTranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIddotidTranslation(AIddotidTranslation node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProductionrule(AProductionrule node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAlternative(AAlternative node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAlternativename(AAlternativename node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElements(AElements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASimpleElement(ASimpleElement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStarElement(AStarElement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAQuestionElement(AQuestionElement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusElement(APlusElement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElementname(AElementname node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACleanElementid(ACleanElementid node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATokenElementid(ATokenElementid node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProductionElementid(AProductionElementid node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTPackagename(TPackagename node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPackagetoken(TPackagetoken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStatestoken(TStatestoken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTHelperstoken(THelperstoken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTokenstoken(TTokenstoken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIgnoredtoken(TIgnoredtoken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTProductionstoken(TProductionstoken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAsttoken(TAsttoken node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNew(TNew node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNull(TNull node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTokenSpecifier(TTokenSpecifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTProductionSpecifier(TProductionSpecifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDot(TDot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDDot(TDDot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSemicolon(TSemicolon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLBkt(TLBkt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRBkt(TRBkt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLPar(TLPar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRPar(TRPar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLBrace(TLBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRBrace(TRBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTQMark(TQMark node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStar(TStar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPipe(TPipe node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSlash(TSlash node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTArrow(TArrow node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTColon(TColon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIdentifier(TIdentifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCharacter(TCharacter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDecChar(TDecChar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTHexChar(THexChar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPGrammar().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAGrammar(AGrammar node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGrammar(AGrammar node)
    {
        DefaultOut(node);
    }

    public override void CaseAGrammar(AGrammar node)
    {
        InAGrammar(node);
        if(node.GetPackage() != null)
        {
            node.GetPackage().Apply(this);
        }
        if(node.GetHelpers() != null)
        {
            node.GetHelpers().Apply(this);
        }
        if(node.GetStates() != null)
        {
            node.GetStates().Apply(this);
        }
        if(node.GetTokens() != null)
        {
            node.GetTokens().Apply(this);
        }
        if(node.GetIgnoredtokens() != null)
        {
            node.GetIgnoredtokens().Apply(this);
        }
        if(node.GetProductions() != null)
        {
            node.GetProductions().Apply(this);
        }
        if(node.GetAstproductions() != null)
        {
            node.GetAstproductions().Apply(this);
        }
        OutAGrammar(node);
    }
    public virtual void InAPackage(APackage node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPackage(APackage node)
    {
        DefaultOut(node);
    }

    public override void CaseAPackage(APackage node)
    {
        InAPackage(node);
        if(node.GetPackagetoken() != null)
        {
            node.GetPackagetoken().Apply(this);
        }
        if(node.GetPackagename() != null)
        {
            node.GetPackagename().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAPackage(node);
    }
    public virtual void InAHelpers(AHelpers node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelpers(AHelpers node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelpers(AHelpers node)
    {
        InAHelpers(node);
        if(node.GetHelperstoken() != null)
        {
            node.GetHelperstoken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetHelpers().Count];
            node.GetHelpers().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PHelper) temp[i]).Apply(this);
            }
        }
        OutAHelpers(node);
    }
    public virtual void InAHelper(AHelper node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelper(AHelper node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelper(AHelper node)
    {
        InAHelper(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetRegex() != null)
        {
            node.GetRegex().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAHelper(node);
    }
    public virtual void InATokens(ATokens node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokens(ATokens node)
    {
        DefaultOut(node);
    }

    public override void CaseATokens(ATokens node)
    {
        InATokens(node);
        if(node.GetTokenstoken() != null)
        {
            node.GetTokenstoken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetTokens().Count];
            node.GetTokens().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PToken) temp[i]).Apply(this);
            }
        }
        OutATokens(node);
    }
    public virtual void InAToken(AToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAToken(AToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAToken(AToken node)
    {
        InAToken(node);
        if(node.GetStatelist() != null)
        {
            node.GetStatelist().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetRegex() != null)
        {
            node.GetRegex().Apply(this);
        }
        if(node.GetTokenlookahead() != null)
        {
            node.GetTokenlookahead().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAToken(node);
    }
    public virtual void InATokenlookahead(ATokenlookahead node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenlookahead(ATokenlookahead node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenlookahead(ATokenlookahead node)
    {
        InATokenlookahead(node);
        if(node.GetSlash() != null)
        {
            node.GetSlash().Apply(this);
        }
        if(node.GetRegex() != null)
        {
            node.GetRegex().Apply(this);
        }
        OutATokenlookahead(node);
    }
    public virtual void InARegex(ARegex node)
    {
        DefaultIn(node);
    }

    public virtual void OutARegex(ARegex node)
    {
        DefaultOut(node);
    }

    public override void CaseARegex(ARegex node)
    {
        InARegex(node);
        {
            Object[] temp = new Object[node.GetParts().Count];
            node.GetParts().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((POrpart) temp[i]).Apply(this);
            }
        }
        OutARegex(node);
    }
    public virtual void InARegexOrpart(ARegexOrpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutARegexOrpart(ARegexOrpart node)
    {
        DefaultOut(node);
    }

    public override void CaseARegexOrpart(ARegexOrpart node)
    {
        InARegexOrpart(node);
        if(node.GetPipe() != null)
        {
            node.GetPipe().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetRegexpart().Count];
            node.GetRegexpart().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PRegexpart) temp[i]).Apply(this);
            }
        }
        OutARegexOrpart(node);
    }
    public virtual void InACharRegexpart(ACharRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharRegexpart(ACharRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseACharRegexpart(ACharRegexpart node)
    {
        InACharRegexpart(node);
        if(node.GetCharacter() != null)
        {
            node.GetCharacter().Apply(this);
        }
        OutACharRegexpart(node);
    }
    public virtual void InADecRegexpart(ADecRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutADecRegexpart(ADecRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseADecRegexpart(ADecRegexpart node)
    {
        InADecRegexpart(node);
        if(node.GetDecChar() != null)
        {
            node.GetDecChar().Apply(this);
        }
        OutADecRegexpart(node);
    }
    public virtual void InAHexRegexpart(AHexRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHexRegexpart(AHexRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAHexRegexpart(AHexRegexpart node)
    {
        InAHexRegexpart(node);
        if(node.GetHexChar() != null)
        {
            node.GetHexChar().Apply(this);
        }
        OutAHexRegexpart(node);
    }
    public virtual void InAUnarystarRegexpart(AUnarystarRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnarystarRegexpart(AUnarystarRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnarystarRegexpart(AUnarystarRegexpart node)
    {
        InAUnarystarRegexpart(node);
        if(node.GetRegexpart() != null)
        {
            node.GetRegexpart().Apply(this);
        }
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        OutAUnarystarRegexpart(node);
    }
    public virtual void InAUnaryquestionRegexpart(AUnaryquestionRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnaryquestionRegexpart(AUnaryquestionRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnaryquestionRegexpart(AUnaryquestionRegexpart node)
    {
        InAUnaryquestionRegexpart(node);
        if(node.GetRegexpart() != null)
        {
            node.GetRegexpart().Apply(this);
        }
        if(node.GetQuestion() != null)
        {
            node.GetQuestion().Apply(this);
        }
        OutAUnaryquestionRegexpart(node);
    }
    public virtual void InAUnaryplusRegexpart(AUnaryplusRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnaryplusRegexpart(AUnaryplusRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnaryplusRegexpart(AUnaryplusRegexpart node)
    {
        InAUnaryplusRegexpart(node);
        if(node.GetRegexpart() != null)
        {
            node.GetRegexpart().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        OutAUnaryplusRegexpart(node);
    }
    public virtual void InABinaryplusRegexpart(ABinaryplusRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutABinaryplusRegexpart(ABinaryplusRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseABinaryplusRegexpart(ABinaryplusRegexpart node)
    {
        InABinaryplusRegexpart(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutABinaryplusRegexpart(node);
    }
    public virtual void InABinaryminusRegexpart(ABinaryminusRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutABinaryminusRegexpart(ABinaryminusRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseABinaryminusRegexpart(ABinaryminusRegexpart node)
    {
        InABinaryminusRegexpart(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutABinaryminusRegexpart(node);
    }
    public virtual void InAIntervalRegexpart(AIntervalRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntervalRegexpart(AIntervalRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntervalRegexpart(AIntervalRegexpart node)
    {
        InAIntervalRegexpart(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetDots() != null)
        {
            node.GetDots().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutAIntervalRegexpart(node);
    }
    public virtual void InAStringRegexpart(AStringRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringRegexpart(AStringRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringRegexpart(AStringRegexpart node)
    {
        InAStringRegexpart(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringRegexpart(node);
    }
    public virtual void InAIdentifierRegexpart(AIdentifierRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdentifierRegexpart(AIdentifierRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdentifierRegexpart(AIdentifierRegexpart node)
    {
        InAIdentifierRegexpart(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAIdentifierRegexpart(node);
    }
    public virtual void InAParenthesisRegexpart(AParenthesisRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisRegexpart(AParenthesisRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisRegexpart(AParenthesisRegexpart node)
    {
        InAParenthesisRegexpart(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetRegex() != null)
        {
            node.GetRegex().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutAParenthesisRegexpart(node);
    }
    public virtual void InAStates(AStates node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStates(AStates node)
    {
        DefaultOut(node);
    }

    public override void CaseAStates(AStates node)
    {
        InAStates(node);
        if(node.GetStatestoken() != null)
        {
            node.GetStatestoken().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAStates(node);
    }
    public virtual void InAIgnoredtokens(AIgnoredtokens node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIgnoredtokens(AIgnoredtokens node)
    {
        DefaultOut(node);
    }

    public override void CaseAIgnoredtokens(AIgnoredtokens node)
    {
        InAIgnoredtokens(node);
        if(node.GetIgnoredtoken() != null)
        {
            node.GetIgnoredtoken().Apply(this);
        }
        if(node.GetTokenstoken() != null)
        {
            node.GetTokenstoken().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAIgnoredtokens(node);
    }
    public virtual void InAIdentifierList(AIdentifierList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdentifierList(AIdentifierList node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdentifierList(AIdentifierList node)
    {
        InAIdentifierList(node);
        {
            Object[] temp = new Object[node.GetListitem().Count];
            node.GetListitem().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PListitem) temp[i]).Apply(this);
            }
        }
        OutAIdentifierList(node);
    }
    public virtual void InATokenstateList(ATokenstateList node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenstateList(ATokenstateList node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenstateList(ATokenstateList node)
    {
        InATokenstateList(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetListitem().Count];
            node.GetListitem().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PListitem) temp[i]).Apply(this);
            }
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutATokenstateList(node);
    }
    public virtual void InATranslationList(ATranslationList node)
    {
        DefaultIn(node);
    }

    public virtual void OutATranslationList(ATranslationList node)
    {
        DefaultOut(node);
    }

    public override void CaseATranslationList(ATranslationList node)
    {
        InATranslationList(node);
        {
            Object[] temp = new Object[node.GetListitem().Count];
            node.GetListitem().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PListitem) temp[i]).Apply(this);
            }
        }
        OutATranslationList(node);
    }
    public virtual void InAIdentifierListitem(AIdentifierListitem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdentifierListitem(AIdentifierListitem node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdentifierListitem(AIdentifierListitem node)
    {
        InAIdentifierListitem(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAIdentifierListitem(node);
    }
    public virtual void InATokenstateListitem(ATokenstateListitem node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenstateListitem(ATokenstateListitem node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenstateListitem(ATokenstateListitem node)
    {
        InATokenstateListitem(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutATokenstateListitem(node);
    }
    public virtual void InATokenstatetransitionListitem(ATokenstatetransitionListitem node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenstatetransitionListitem(ATokenstatetransitionListitem node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenstatetransitionListitem(ATokenstatetransitionListitem node)
    {
        InATokenstatetransitionListitem(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFrom() != null)
        {
            node.GetFrom().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetTo() != null)
        {
            node.GetTo().Apply(this);
        }
        OutATokenstatetransitionListitem(node);
    }
    public virtual void InATranslationListitem(ATranslationListitem node)
    {
        DefaultIn(node);
    }

    public virtual void OutATranslationListitem(ATranslationListitem node)
    {
        DefaultOut(node);
    }

    public override void CaseATranslationListitem(ATranslationListitem node)
    {
        InATranslationListitem(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetTranslation() != null)
        {
            node.GetTranslation().Apply(this);
        }
        OutATranslationListitem(node);
    }
    public virtual void InAProductions(AProductions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProductions(AProductions node)
    {
        DefaultOut(node);
    }

    public override void CaseAProductions(AProductions node)
    {
        InAProductions(node);
        if(node.GetProductionstoken() != null)
        {
            node.GetProductionstoken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetProductions().Count];
            node.GetProductions().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PProduction) temp[i]).Apply(this);
            }
        }
        OutAProductions(node);
    }
    public virtual void InAAstproductions(AAstproductions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAstproductions(AAstproductions node)
    {
        DefaultOut(node);
    }

    public override void CaseAAstproductions(AAstproductions node)
    {
        InAAstproductions(node);
        if(node.GetAsttoken() != null)
        {
            node.GetAsttoken().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetProductions().Count];
            node.GetProductions().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PProduction) temp[i]).Apply(this);
            }
        }
        OutAAstproductions(node);
    }
    public virtual void InAProduction(AProduction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProduction(AProduction node)
    {
        DefaultOut(node);
    }

    public override void CaseAProduction(AProduction node)
    {
        InAProduction(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetProdtranslation() != null)
        {
            node.GetProdtranslation().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetProductionrule() != null)
        {
            node.GetProductionrule().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAProduction(node);
    }
    public virtual void InACleanProdtranslation(ACleanProdtranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutACleanProdtranslation(ACleanProdtranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseACleanProdtranslation(ACleanProdtranslation node)
    {
        InACleanProdtranslation(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutACleanProdtranslation(node);
    }
    public virtual void InAStarProdtranslation(AStarProdtranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStarProdtranslation(AStarProdtranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAStarProdtranslation(AStarProdtranslation node)
    {
        InAStarProdtranslation(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutAStarProdtranslation(node);
    }
    public virtual void InAPlusProdtranslation(APlusProdtranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusProdtranslation(APlusProdtranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusProdtranslation(APlusProdtranslation node)
    {
        InAPlusProdtranslation(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutAPlusProdtranslation(node);
    }
    public virtual void InAQuestionProdtranslation(AQuestionProdtranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAQuestionProdtranslation(AQuestionProdtranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAQuestionProdtranslation(AQuestionProdtranslation node)
    {
        InAQuestionProdtranslation(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetQMark() != null)
        {
            node.GetQMark().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutAQuestionProdtranslation(node);
    }
    public virtual void InAFullTranslation(AFullTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFullTranslation(AFullTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAFullTranslation(AFullTranslation node)
    {
        InAFullTranslation(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetTranslation() != null)
        {
            node.GetTranslation().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutAFullTranslation(node);
    }
    public virtual void InANewTranslation(ANewTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewTranslation(ANewTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseANewTranslation(ANewTranslation node)
    {
        InANewTranslation(node);
        if(node.GetNew() != null)
        {
            node.GetNew().Apply(this);
        }
        if(node.GetProduction() != null)
        {
            node.GetProduction().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutANewTranslation(node);
    }
    public virtual void InANewalternativeTranslation(ANewalternativeTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewalternativeTranslation(ANewalternativeTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseANewalternativeTranslation(ANewalternativeTranslation node)
    {
        InANewalternativeTranslation(node);
        if(node.GetNew() != null)
        {
            node.GetNew().Apply(this);
        }
        if(node.GetProduction() != null)
        {
            node.GetProduction().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetAlternative() != null)
        {
            node.GetAlternative().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutANewalternativeTranslation(node);
    }
    public virtual void InAListTranslation(AListTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAListTranslation(AListTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAListTranslation(AListTranslation node)
    {
        InAListTranslation(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetElements() != null)
        {
            node.GetElements().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutAListTranslation(node);
    }
    public virtual void InANullTranslation(ANullTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANullTranslation(ANullTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseANullTranslation(ANullTranslation node)
    {
        InANullTranslation(node);
        if(node.GetNull() != null)
        {
            node.GetNull().Apply(this);
        }
        OutANullTranslation(node);
    }
    public virtual void InAIdTranslation(AIdTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdTranslation(AIdTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdTranslation(AIdTranslation node)
    {
        InAIdTranslation(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAIdTranslation(node);
    }
    public virtual void InAIddotidTranslation(AIddotidTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIddotidTranslation(AIddotidTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAIddotidTranslation(AIddotidTranslation node)
    {
        InAIddotidTranslation(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetProduction() != null)
        {
            node.GetProduction().Apply(this);
        }
        OutAIddotidTranslation(node);
    }
    public virtual void InAProductionrule(AProductionrule node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProductionrule(AProductionrule node)
    {
        DefaultOut(node);
    }

    public override void CaseAProductionrule(AProductionrule node)
    {
        InAProductionrule(node);
        {
            Object[] temp = new Object[node.GetAlternatives().Count];
            node.GetAlternatives().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PAlternative) temp[i]).Apply(this);
            }
        }
        OutAProductionrule(node);
    }
    public virtual void InAAlternative(AAlternative node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAlternative(AAlternative node)
    {
        DefaultOut(node);
    }

    public override void CaseAAlternative(AAlternative node)
    {
        InAAlternative(node);
        if(node.GetPipe() != null)
        {
            node.GetPipe().Apply(this);
        }
        if(node.GetAlternativename() != null)
        {
            node.GetAlternativename().Apply(this);
        }
        if(node.GetElements() != null)
        {
            node.GetElements().Apply(this);
        }
        if(node.GetTranslation() != null)
        {
            node.GetTranslation().Apply(this);
        }
        OutAAlternative(node);
    }
    public virtual void InAAlternativename(AAlternativename node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAlternativename(AAlternativename node)
    {
        DefaultOut(node);
    }

    public override void CaseAAlternativename(AAlternativename node)
    {
        InAAlternativename(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        OutAAlternativename(node);
    }
    public virtual void InAElements(AElements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElements(AElements node)
    {
        DefaultOut(node);
    }

    public override void CaseAElements(AElements node)
    {
        InAElements(node);
        {
            Object[] temp = new Object[node.GetElement().Count];
            node.GetElement().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PElement) temp[i]).Apply(this);
            }
        }
        OutAElements(node);
    }
    public virtual void InASimpleElement(ASimpleElement node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleElement(ASimpleElement node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleElement(ASimpleElement node)
    {
        InASimpleElement(node);
        if(node.GetElementname() != null)
        {
            node.GetElementname().Apply(this);
        }
        if(node.GetElementid() != null)
        {
            node.GetElementid().Apply(this);
        }
        OutASimpleElement(node);
    }
    public virtual void InAStarElement(AStarElement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStarElement(AStarElement node)
    {
        DefaultOut(node);
    }

    public override void CaseAStarElement(AStarElement node)
    {
        InAStarElement(node);
        if(node.GetElementname() != null)
        {
            node.GetElementname().Apply(this);
        }
        if(node.GetElementid() != null)
        {
            node.GetElementid().Apply(this);
        }
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        OutAStarElement(node);
    }
    public virtual void InAQuestionElement(AQuestionElement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAQuestionElement(AQuestionElement node)
    {
        DefaultOut(node);
    }

    public override void CaseAQuestionElement(AQuestionElement node)
    {
        InAQuestionElement(node);
        if(node.GetElementname() != null)
        {
            node.GetElementname().Apply(this);
        }
        if(node.GetElementid() != null)
        {
            node.GetElementid().Apply(this);
        }
        if(node.GetQMark() != null)
        {
            node.GetQMark().Apply(this);
        }
        OutAQuestionElement(node);
    }
    public virtual void InAPlusElement(APlusElement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusElement(APlusElement node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusElement(APlusElement node)
    {
        InAPlusElement(node);
        if(node.GetElementname() != null)
        {
            node.GetElementname().Apply(this);
        }
        if(node.GetElementid() != null)
        {
            node.GetElementid().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        OutAPlusElement(node);
    }
    public virtual void InAElementname(AElementname node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElementname(AElementname node)
    {
        DefaultOut(node);
    }

    public override void CaseAElementname(AElementname node)
    {
        InAElementname(node);
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetColon() != null)
        {
            node.GetColon().Apply(this);
        }
        OutAElementname(node);
    }
    public virtual void InACleanElementid(ACleanElementid node)
    {
        DefaultIn(node);
    }

    public virtual void OutACleanElementid(ACleanElementid node)
    {
        DefaultOut(node);
    }

    public override void CaseACleanElementid(ACleanElementid node)
    {
        InACleanElementid(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutACleanElementid(node);
    }
    public virtual void InATokenElementid(ATokenElementid node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenElementid(ATokenElementid node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenElementid(ATokenElementid node)
    {
        InATokenElementid(node);
        if(node.GetTokenSpecifier() != null)
        {
            node.GetTokenSpecifier().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutATokenElementid(node);
    }
    public virtual void InAProductionElementid(AProductionElementid node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProductionElementid(AProductionElementid node)
    {
        DefaultOut(node);
    }

    public override void CaseAProductionElementid(AProductionElementid node)
    {
        InAProductionElementid(node);
        if(node.GetProductionSpecifier() != null)
        {
            node.GetProductionSpecifier().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAProductionElementid(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPGrammar().Apply(this);
        OutStart(node);
    }

    public virtual void InAGrammar(AGrammar node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGrammar(AGrammar node)
    {
        DefaultOut(node);
    }

    public override void CaseAGrammar(AGrammar node)
    {
        InAGrammar(node);
        if(node.GetAstproductions() != null)
        {
            node.GetAstproductions().Apply(this);
        }
        if(node.GetProductions() != null)
        {
            node.GetProductions().Apply(this);
        }
        if(node.GetIgnoredtokens() != null)
        {
            node.GetIgnoredtokens().Apply(this);
        }
        if(node.GetTokens() != null)
        {
            node.GetTokens().Apply(this);
        }
        if(node.GetStates() != null)
        {
            node.GetStates().Apply(this);
        }
        if(node.GetHelpers() != null)
        {
            node.GetHelpers().Apply(this);
        }
        if(node.GetPackage() != null)
        {
            node.GetPackage().Apply(this);
        }
        OutAGrammar(node);
    }
    public virtual void InAPackage(APackage node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPackage(APackage node)
    {
        DefaultOut(node);
    }

    public override void CaseAPackage(APackage node)
    {
        InAPackage(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetPackagename() != null)
        {
            node.GetPackagename().Apply(this);
        }
        if(node.GetPackagetoken() != null)
        {
            node.GetPackagetoken().Apply(this);
        }
        OutAPackage(node);
    }
    public virtual void InAHelpers(AHelpers node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelpers(AHelpers node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelpers(AHelpers node)
    {
        InAHelpers(node);
        {
            Object[] temp = new Object[node.GetHelpers().Count];
            node.GetHelpers().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PHelper) temp[i]).Apply(this);
            }
        }
        if(node.GetHelperstoken() != null)
        {
            node.GetHelperstoken().Apply(this);
        }
        OutAHelpers(node);
    }
    public virtual void InAHelper(AHelper node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelper(AHelper node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelper(AHelper node)
    {
        InAHelper(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetRegex() != null)
        {
            node.GetRegex().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAHelper(node);
    }
    public virtual void InATokens(ATokens node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokens(ATokens node)
    {
        DefaultOut(node);
    }

    public override void CaseATokens(ATokens node)
    {
        InATokens(node);
        {
            Object[] temp = new Object[node.GetTokens().Count];
            node.GetTokens().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PToken) temp[i]).Apply(this);
            }
        }
        if(node.GetTokenstoken() != null)
        {
            node.GetTokenstoken().Apply(this);
        }
        OutATokens(node);
    }
    public virtual void InAToken(AToken node)
    {
        DefaultIn(node);
    }

    public virtual void OutAToken(AToken node)
    {
        DefaultOut(node);
    }

    public override void CaseAToken(AToken node)
    {
        InAToken(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetTokenlookahead() != null)
        {
            node.GetTokenlookahead().Apply(this);
        }
        if(node.GetRegex() != null)
        {
            node.GetRegex().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetStatelist() != null)
        {
            node.GetStatelist().Apply(this);
        }
        OutAToken(node);
    }
    public virtual void InATokenlookahead(ATokenlookahead node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenlookahead(ATokenlookahead node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenlookahead(ATokenlookahead node)
    {
        InATokenlookahead(node);
        if(node.GetRegex() != null)
        {
            node.GetRegex().Apply(this);
        }
        if(node.GetSlash() != null)
        {
            node.GetSlash().Apply(this);
        }
        OutATokenlookahead(node);
    }
    public virtual void InARegex(ARegex node)
    {
        DefaultIn(node);
    }

    public virtual void OutARegex(ARegex node)
    {
        DefaultOut(node);
    }

    public override void CaseARegex(ARegex node)
    {
        InARegex(node);
        {
            Object[] temp = new Object[node.GetParts().Count];
            node.GetParts().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((POrpart) temp[i]).Apply(this);
            }
        }
        OutARegex(node);
    }
    public virtual void InARegexOrpart(ARegexOrpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutARegexOrpart(ARegexOrpart node)
    {
        DefaultOut(node);
    }

    public override void CaseARegexOrpart(ARegexOrpart node)
    {
        InARegexOrpart(node);
        {
            Object[] temp = new Object[node.GetRegexpart().Count];
            node.GetRegexpart().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PRegexpart) temp[i]).Apply(this);
            }
        }
        if(node.GetPipe() != null)
        {
            node.GetPipe().Apply(this);
        }
        OutARegexOrpart(node);
    }
    public virtual void InACharRegexpart(ACharRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharRegexpart(ACharRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseACharRegexpart(ACharRegexpart node)
    {
        InACharRegexpart(node);
        if(node.GetCharacter() != null)
        {
            node.GetCharacter().Apply(this);
        }
        OutACharRegexpart(node);
    }
    public virtual void InADecRegexpart(ADecRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutADecRegexpart(ADecRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseADecRegexpart(ADecRegexpart node)
    {
        InADecRegexpart(node);
        if(node.GetDecChar() != null)
        {
            node.GetDecChar().Apply(this);
        }
        OutADecRegexpart(node);
    }
    public virtual void InAHexRegexpart(AHexRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHexRegexpart(AHexRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAHexRegexpart(AHexRegexpart node)
    {
        InAHexRegexpart(node);
        if(node.GetHexChar() != null)
        {
            node.GetHexChar().Apply(this);
        }
        OutAHexRegexpart(node);
    }
    public virtual void InAUnarystarRegexpart(AUnarystarRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnarystarRegexpart(AUnarystarRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnarystarRegexpart(AUnarystarRegexpart node)
    {
        InAUnarystarRegexpart(node);
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        if(node.GetRegexpart() != null)
        {
            node.GetRegexpart().Apply(this);
        }
        OutAUnarystarRegexpart(node);
    }
    public virtual void InAUnaryquestionRegexpart(AUnaryquestionRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnaryquestionRegexpart(AUnaryquestionRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnaryquestionRegexpart(AUnaryquestionRegexpart node)
    {
        InAUnaryquestionRegexpart(node);
        if(node.GetQuestion() != null)
        {
            node.GetQuestion().Apply(this);
        }
        if(node.GetRegexpart() != null)
        {
            node.GetRegexpart().Apply(this);
        }
        OutAUnaryquestionRegexpart(node);
    }
    public virtual void InAUnaryplusRegexpart(AUnaryplusRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnaryplusRegexpart(AUnaryplusRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnaryplusRegexpart(AUnaryplusRegexpart node)
    {
        InAUnaryplusRegexpart(node);
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetRegexpart() != null)
        {
            node.GetRegexpart().Apply(this);
        }
        OutAUnaryplusRegexpart(node);
    }
    public virtual void InABinaryplusRegexpart(ABinaryplusRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutABinaryplusRegexpart(ABinaryplusRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseABinaryplusRegexpart(ABinaryplusRegexpart node)
    {
        InABinaryplusRegexpart(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutABinaryplusRegexpart(node);
    }
    public virtual void InABinaryminusRegexpart(ABinaryminusRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutABinaryminusRegexpart(ABinaryminusRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseABinaryminusRegexpart(ABinaryminusRegexpart node)
    {
        InABinaryminusRegexpart(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutABinaryminusRegexpart(node);
    }
    public virtual void InAIntervalRegexpart(AIntervalRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntervalRegexpart(AIntervalRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntervalRegexpart(AIntervalRegexpart node)
    {
        InAIntervalRegexpart(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetDots() != null)
        {
            node.GetDots().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutAIntervalRegexpart(node);
    }
    public virtual void InAStringRegexpart(AStringRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringRegexpart(AStringRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringRegexpart(AStringRegexpart node)
    {
        InAStringRegexpart(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringRegexpart(node);
    }
    public virtual void InAIdentifierRegexpart(AIdentifierRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdentifierRegexpart(AIdentifierRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdentifierRegexpart(AIdentifierRegexpart node)
    {
        InAIdentifierRegexpart(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAIdentifierRegexpart(node);
    }
    public virtual void InAParenthesisRegexpart(AParenthesisRegexpart node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisRegexpart(AParenthesisRegexpart node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisRegexpart(AParenthesisRegexpart node)
    {
        InAParenthesisRegexpart(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetRegex() != null)
        {
            node.GetRegex().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutAParenthesisRegexpart(node);
    }
    public virtual void InAStates(AStates node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStates(AStates node)
    {
        DefaultOut(node);
    }

    public override void CaseAStates(AStates node)
    {
        InAStates(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetStatestoken() != null)
        {
            node.GetStatestoken().Apply(this);
        }
        OutAStates(node);
    }
    public virtual void InAIgnoredtokens(AIgnoredtokens node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIgnoredtokens(AIgnoredtokens node)
    {
        DefaultOut(node);
    }

    public override void CaseAIgnoredtokens(AIgnoredtokens node)
    {
        InAIgnoredtokens(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetList() != null)
        {
            node.GetList().Apply(this);
        }
        if(node.GetTokenstoken() != null)
        {
            node.GetTokenstoken().Apply(this);
        }
        if(node.GetIgnoredtoken() != null)
        {
            node.GetIgnoredtoken().Apply(this);
        }
        OutAIgnoredtokens(node);
    }
    public virtual void InAIdentifierList(AIdentifierList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdentifierList(AIdentifierList node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdentifierList(AIdentifierList node)
    {
        InAIdentifierList(node);
        {
            Object[] temp = new Object[node.GetListitem().Count];
            node.GetListitem().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PListitem) temp[i]).Apply(this);
            }
        }
        OutAIdentifierList(node);
    }
    public virtual void InATokenstateList(ATokenstateList node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenstateList(ATokenstateList node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenstateList(ATokenstateList node)
    {
        InATokenstateList(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetListitem().Count];
            node.GetListitem().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PListitem) temp[i]).Apply(this);
            }
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutATokenstateList(node);
    }
    public virtual void InATranslationList(ATranslationList node)
    {
        DefaultIn(node);
    }

    public virtual void OutATranslationList(ATranslationList node)
    {
        DefaultOut(node);
    }

    public override void CaseATranslationList(ATranslationList node)
    {
        InATranslationList(node);
        {
            Object[] temp = new Object[node.GetListitem().Count];
            node.GetListitem().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PListitem) temp[i]).Apply(this);
            }
        }
        OutATranslationList(node);
    }
    public virtual void InAIdentifierListitem(AIdentifierListitem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdentifierListitem(AIdentifierListitem node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdentifierListitem(AIdentifierListitem node)
    {
        InAIdentifierListitem(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutAIdentifierListitem(node);
    }
    public virtual void InATokenstateListitem(ATokenstateListitem node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenstateListitem(ATokenstateListitem node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenstateListitem(ATokenstateListitem node)
    {
        InATokenstateListitem(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutATokenstateListitem(node);
    }
    public virtual void InATokenstatetransitionListitem(ATokenstatetransitionListitem node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenstatetransitionListitem(ATokenstatetransitionListitem node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenstatetransitionListitem(ATokenstatetransitionListitem node)
    {
        InATokenstatetransitionListitem(node);
        if(node.GetTo() != null)
        {
            node.GetTo().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetFrom() != null)
        {
            node.GetFrom().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutATokenstatetransitionListitem(node);
    }
    public virtual void InATranslationListitem(ATranslationListitem node)
    {
        DefaultIn(node);
    }

    public virtual void OutATranslationListitem(ATranslationListitem node)
    {
        DefaultOut(node);
    }

    public override void CaseATranslationListitem(ATranslationListitem node)
    {
        InATranslationListitem(node);
        if(node.GetTranslation() != null)
        {
            node.GetTranslation().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutATranslationListitem(node);
    }
    public virtual void InAProductions(AProductions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProductions(AProductions node)
    {
        DefaultOut(node);
    }

    public override void CaseAProductions(AProductions node)
    {
        InAProductions(node);
        {
            Object[] temp = new Object[node.GetProductions().Count];
            node.GetProductions().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PProduction) temp[i]).Apply(this);
            }
        }
        if(node.GetProductionstoken() != null)
        {
            node.GetProductionstoken().Apply(this);
        }
        OutAProductions(node);
    }
    public virtual void InAAstproductions(AAstproductions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAstproductions(AAstproductions node)
    {
        DefaultOut(node);
    }

    public override void CaseAAstproductions(AAstproductions node)
    {
        InAAstproductions(node);
        {
            Object[] temp = new Object[node.GetProductions().Count];
            node.GetProductions().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PProduction) temp[i]).Apply(this);
            }
        }
        if(node.GetAsttoken() != null)
        {
            node.GetAsttoken().Apply(this);
        }
        OutAAstproductions(node);
    }
    public virtual void InAProduction(AProduction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProduction(AProduction node)
    {
        DefaultOut(node);
    }

    public override void CaseAProduction(AProduction node)
    {
        InAProduction(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetProductionrule() != null)
        {
            node.GetProductionrule().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetProdtranslation() != null)
        {
            node.GetProdtranslation().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAProduction(node);
    }
    public virtual void InACleanProdtranslation(ACleanProdtranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutACleanProdtranslation(ACleanProdtranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseACleanProdtranslation(ACleanProdtranslation node)
    {
        InACleanProdtranslation(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutACleanProdtranslation(node);
    }
    public virtual void InAStarProdtranslation(AStarProdtranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStarProdtranslation(AStarProdtranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAStarProdtranslation(AStarProdtranslation node)
    {
        InAStarProdtranslation(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutAStarProdtranslation(node);
    }
    public virtual void InAPlusProdtranslation(APlusProdtranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusProdtranslation(APlusProdtranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusProdtranslation(APlusProdtranslation node)
    {
        InAPlusProdtranslation(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutAPlusProdtranslation(node);
    }
    public virtual void InAQuestionProdtranslation(AQuestionProdtranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAQuestionProdtranslation(AQuestionProdtranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAQuestionProdtranslation(AQuestionProdtranslation node)
    {
        InAQuestionProdtranslation(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetQMark() != null)
        {
            node.GetQMark().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutAQuestionProdtranslation(node);
    }
    public virtual void InAFullTranslation(AFullTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFullTranslation(AFullTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAFullTranslation(AFullTranslation node)
    {
        InAFullTranslation(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetTranslation() != null)
        {
            node.GetTranslation().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutAFullTranslation(node);
    }
    public virtual void InANewTranslation(ANewTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewTranslation(ANewTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseANewTranslation(ANewTranslation node)
    {
        InANewTranslation(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetProduction() != null)
        {
            node.GetProduction().Apply(this);
        }
        if(node.GetNew() != null)
        {
            node.GetNew().Apply(this);
        }
        OutANewTranslation(node);
    }
    public virtual void InANewalternativeTranslation(ANewalternativeTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewalternativeTranslation(ANewalternativeTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseANewalternativeTranslation(ANewalternativeTranslation node)
    {
        InANewalternativeTranslation(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        if(node.GetAlternative() != null)
        {
            node.GetAlternative().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetProduction() != null)
        {
            node.GetProduction().Apply(this);
        }
        if(node.GetNew() != null)
        {
            node.GetNew().Apply(this);
        }
        OutANewalternativeTranslation(node);
    }
    public virtual void InAListTranslation(AListTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAListTranslation(AListTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAListTranslation(AListTranslation node)
    {
        InAListTranslation(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetElements() != null)
        {
            node.GetElements().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutAListTranslation(node);
    }
    public virtual void InANullTranslation(ANullTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutANullTranslation(ANullTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseANullTranslation(ANullTranslation node)
    {
        InANullTranslation(node);
        if(node.GetNull() != null)
        {
            node.GetNull().Apply(this);
        }
        OutANullTranslation(node);
    }
    public virtual void InAIdTranslation(AIdTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdTranslation(AIdTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdTranslation(AIdTranslation node)
    {
        InAIdTranslation(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAIdTranslation(node);
    }
    public virtual void InAIddotidTranslation(AIddotidTranslation node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIddotidTranslation(AIddotidTranslation node)
    {
        DefaultOut(node);
    }

    public override void CaseAIddotidTranslation(AIddotidTranslation node)
    {
        InAIddotidTranslation(node);
        if(node.GetProduction() != null)
        {
            node.GetProduction().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAIddotidTranslation(node);
    }
    public virtual void InAProductionrule(AProductionrule node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProductionrule(AProductionrule node)
    {
        DefaultOut(node);
    }

    public override void CaseAProductionrule(AProductionrule node)
    {
        InAProductionrule(node);
        {
            Object[] temp = new Object[node.GetAlternatives().Count];
            node.GetAlternatives().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PAlternative) temp[i]).Apply(this);
            }
        }
        OutAProductionrule(node);
    }
    public virtual void InAAlternative(AAlternative node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAlternative(AAlternative node)
    {
        DefaultOut(node);
    }

    public override void CaseAAlternative(AAlternative node)
    {
        InAAlternative(node);
        if(node.GetTranslation() != null)
        {
            node.GetTranslation().Apply(this);
        }
        if(node.GetElements() != null)
        {
            node.GetElements().Apply(this);
        }
        if(node.GetAlternativename() != null)
        {
            node.GetAlternativename().Apply(this);
        }
        if(node.GetPipe() != null)
        {
            node.GetPipe().Apply(this);
        }
        OutAAlternative(node);
    }
    public virtual void InAAlternativename(AAlternativename node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAlternativename(AAlternativename node)
    {
        DefaultOut(node);
    }

    public override void CaseAAlternativename(AAlternativename node)
    {
        InAAlternativename(node);
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutAAlternativename(node);
    }
    public virtual void InAElements(AElements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElements(AElements node)
    {
        DefaultOut(node);
    }

    public override void CaseAElements(AElements node)
    {
        InAElements(node);
        {
            Object[] temp = new Object[node.GetElement().Count];
            node.GetElement().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PElement) temp[i]).Apply(this);
            }
        }
        OutAElements(node);
    }
    public virtual void InASimpleElement(ASimpleElement node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleElement(ASimpleElement node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleElement(ASimpleElement node)
    {
        InASimpleElement(node);
        if(node.GetElementid() != null)
        {
            node.GetElementid().Apply(this);
        }
        if(node.GetElementname() != null)
        {
            node.GetElementname().Apply(this);
        }
        OutASimpleElement(node);
    }
    public virtual void InAStarElement(AStarElement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStarElement(AStarElement node)
    {
        DefaultOut(node);
    }

    public override void CaseAStarElement(AStarElement node)
    {
        InAStarElement(node);
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        if(node.GetElementid() != null)
        {
            node.GetElementid().Apply(this);
        }
        if(node.GetElementname() != null)
        {
            node.GetElementname().Apply(this);
        }
        OutAStarElement(node);
    }
    public virtual void InAQuestionElement(AQuestionElement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAQuestionElement(AQuestionElement node)
    {
        DefaultOut(node);
    }

    public override void CaseAQuestionElement(AQuestionElement node)
    {
        InAQuestionElement(node);
        if(node.GetQMark() != null)
        {
            node.GetQMark().Apply(this);
        }
        if(node.GetElementid() != null)
        {
            node.GetElementid().Apply(this);
        }
        if(node.GetElementname() != null)
        {
            node.GetElementname().Apply(this);
        }
        OutAQuestionElement(node);
    }
    public virtual void InAPlusElement(APlusElement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusElement(APlusElement node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusElement(APlusElement node)
    {
        InAPlusElement(node);
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetElementid() != null)
        {
            node.GetElementid().Apply(this);
        }
        if(node.GetElementname() != null)
        {
            node.GetElementname().Apply(this);
        }
        OutAPlusElement(node);
    }
    public virtual void InAElementname(AElementname node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElementname(AElementname node)
    {
        DefaultOut(node);
    }

    public override void CaseAElementname(AElementname node)
    {
        InAElementname(node);
        if(node.GetColon() != null)
        {
            node.GetColon().Apply(this);
        }
        if(node.GetRpar() != null)
        {
            node.GetRpar().Apply(this);
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        if(node.GetLpar() != null)
        {
            node.GetLpar().Apply(this);
        }
        OutAElementname(node);
    }
    public virtual void InACleanElementid(ACleanElementid node)
    {
        DefaultIn(node);
    }

    public virtual void OutACleanElementid(ACleanElementid node)
    {
        DefaultOut(node);
    }

    public override void CaseACleanElementid(ACleanElementid node)
    {
        InACleanElementid(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutACleanElementid(node);
    }
    public virtual void InATokenElementid(ATokenElementid node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenElementid(ATokenElementid node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenElementid(ATokenElementid node)
    {
        InATokenElementid(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetTokenSpecifier() != null)
        {
            node.GetTokenSpecifier().Apply(this);
        }
        OutATokenElementid(node);
    }
    public virtual void InAProductionElementid(AProductionElementid node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProductionElementid(AProductionElementid node)
    {
        DefaultOut(node);
    }

    public override void CaseAProductionElementid(AProductionElementid node)
    {
        InAProductionElementid(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetDot() != null)
        {
            node.GetDot().Apply(this);
        }
        if(node.GetProductionSpecifier() != null)
        {
            node.GetProductionSpecifier().Apply(this);
        }
        OutAProductionElementid(node);
    }
}
} // namespace Sable.Compiler.analysis
