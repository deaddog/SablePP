using FastColoredTextBoxNS;
using System;
using System.Drawing;
using System.Windows.Forms;

namespace SablePP.Tools.Editor
{
    public partial class SimpleEditor : EditorForm
    {
        public SimpleEditor()
            : base()
        {
            InitializeComponent();

            HookEditToTextBox(codeTextBox1);

            Font consolas = new Font("Consolas", 10);
            if (consolas.Name == "Consolas")
                codeTextBox1.Font = consolas;
            else
                consolas.Dispose();
        }

        protected override void OnNewFileCreated(EventArgs e)
        {
            splitContainer1.Enabled = true;

            codeTextBox1.Text = EditorSettings.Default.DefaultCode;
            codeTextBox1.Focus();
            codeTextBox1.SelectionLength = 0;
            codeTextBox1.SelectionStart = 0;

            if (codeTextBox1.Text == string.Empty)
                codeTextBox1.OnTextChangedDelayed(codeTextBox1.Range);

            codeTextBox1.ClearUndo();

            base.OnNewFileCreated(e);
        }
        protected override void OnFileOpened(FileOpenedEventArgs e)
        {
            splitContainer1.Enabled = true;

            codeTextBox1.Text = e.Content;
            codeTextBox1.ClearUndo();

            codeTextBox1.Focus();

            if (codeTextBox1.Text == string.Empty)
                codeTextBox1.OnTextChangedDelayed(codeTextBox1.Range);

            base.OnFileOpened(e);
        }
        protected override void OnFileSaving(FileSavingEventArgs e)
        {
            e.Content = codeTextBox1.Text;

            base.OnFileSaving(e);
        }
        protected override void OnFileClosed(EventArgs e)
        {
            splitContainer1.Enabled = false;
            codeTextBox1.Text = "";

            base.OnFileClosed(e);
        }


        /// <summary>
        /// Gets the last compilation <see cref="SablePP.Tools.Editor.CodeTextBox.Result"/> generated by the <see cref="ICompilerExecuter"/> in the <see cref="CodeTextBox"/> of this <see cref="EditorForm"/>.
        /// Consider using the <see cref="WaitForResult"/> method if the most resent result is required.
        /// </summary>
        public CodeTextBox.Result LastResult
        {
            get { return codeTextBox1.LastResult; }
        }

        /// <summary>
        /// Waits for the current compilation process to finish and returns its <see cref="SablePP.Tools.Editor.CodeTextBox.Result"/>.
        /// </summary>
        /// <returns>A <see cref="SablePP.Tools.Editor.CodeTextBox.Result"/> detailing the result of the currently executing compilation process.</returns>
        public CodeTextBox.Result WaitForResult()
        {
            return codeTextBox1.WaitForResult();
        }

        /// <summary>
        /// Gets or sets the <see cref="ICompilerExecuter"/> used by the <see cref="CodeTextBox"/> contained by this <see cref="EditorForm"/>.
        /// </summary>
        public ICompilerExecuter Executer
        {
            get { return codeTextBox1.Executer; }
            set { codeTextBox1.Executer = value; }
        }

        /// <summary>
        /// Gets the <see cref="CodeTextBox"/> contained by this form.
        /// Use caution when accessing this control, as it handles all interaction with the compiler.
        /// </summary>
        public CodeTextBox CodeTextBox
        {
            get { return codeTextBox1; }
        }
        private void codeTextBox1_SelectionChanged(object sender, EventArgs e)
        {
            string lineText = lineLabel.Text.Substring(0, lineLabel.Text.IndexOf(':') + 1) + " ";
            lineLabel.Text = lineText + (codeTextBox1.Selection.Start.iLine + 1);

            string positionText = positionLabel.Text.Substring(0, positionLabel.Text.IndexOf(':') + 1) + " ";
            positionLabel.Text = positionText + (codeTextBox1.Selection.Start.iChar + 1);
        }
        private void codeTextBox1_TextChanged(object sender, TextChangedEventArgs e)
        {
            base.ApplyChanged();
        }
    }
}
