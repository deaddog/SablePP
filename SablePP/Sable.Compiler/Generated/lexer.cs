/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using Sable.Tools.Nodes;
using Sable.Compiler.Nodes;
using Sable.Tools.Error;

namespace Sable.Compiler.Lexing
{

    internal class PushbackReader
    {
        private TextReader reader;
        private Stack stack = new Stack();


        internal PushbackReader(TextReader reader)
        {
            this.reader = reader;
        }

        internal int Peek()
        {
            if (stack.Count > 0) return (int)stack.Peek();
            return reader.Peek();
        }

        internal int Read()
        {
            if (stack.Count > 0) return (int)stack.Pop();
            return reader.Read();
        }

        internal void Unread(int v)
        {
            stack.Push(v);
        }
    }

    public class Lexer : Sable.Tools.Lexing.ILexer
    {
        protected Token token;
        protected State currentState = State.NORMAL;

        private PushbackReader input;
        private int line;
        private int pos;
        private bool cr;
        private bool eof;
        private StringBuilder text = new StringBuilder();

        protected virtual void Filter()
        {
        }

        public Lexer(TextReader input)
        {
            this.input = new PushbackReader(input);
        }

        public virtual Token Peek()
        {
            while (token == null)
            {
                token = GetToken();
                Filter();
            }

            return token;
        }

        public virtual Token Next()
        {
            while (token == null)
            {
                token = GetToken();
                Filter();
            }

            Token result = token;
            token = null;
            return result;
        }

        protected virtual Token GetToken()
        {
            int dfa_state = 0;

            int start_pos = pos;
            int start_line = line;

            int accept_state = -1;
            int accept_token = -1;
            int accept_length = -1;
            int accept_pos = -1;
            int accept_line = -1;

            int[][][] gotoTable = Lexer.gotoTable[currentState.id()];
            int[] accept = Lexer.accept[currentState.id()];
            text.Length = 0;

            while (true)
            {
                int c = GetChar();

                if (c != -1)
                {
                    switch (c)
                    {
                        case 10:
                            if (cr)
                            {
                                cr = false;
                            }
                            else
                            {
                                line++;
                                pos = 0;
                            }
                            break;
                        case 13:
                            line++;
                            pos = 0;
                            cr = true;
                            break;
                        default:
                            pos++;
                            cr = false;
                            break;
                    };

                    text.Append((char)c);
                    do
                    {
                        int oldState = (dfa_state < -1) ? (-2 - dfa_state) : dfa_state;

                        dfa_state = -1;

                        int[][] tmp1 = gotoTable[oldState];
                        int low = 0;
                        int high = tmp1.Length - 1;

                        while (low <= high)
                        {
                            int middle = (low + high) / 2;
                            int[] tmp2 = tmp1[middle];

                            if (c < tmp2[0])
                            {
                                high = middle - 1;
                            }
                            else if (c > tmp2[1])
                            {
                                low = middle + 1;
                            }
                            else
                            {
                                dfa_state = tmp2[2];
                                break;
                            }
                        }
                    } while (dfa_state < -1);
                }
                else
                {
                    dfa_state = -1;
                }

                if (dfa_state >= 0)
                {
                    if (accept[dfa_state] != -1)
                    {
                        accept_state = dfa_state;
                        accept_token = accept[dfa_state];
                        accept_length = text.Length;
                        accept_pos = pos;
                        accept_line = line;
                    }
                }
                else
                {
                    if (accept_state != -1)
                    {
                        switch (accept_token)
                        {
                            case 0:
                                {
                                    Token token = New0(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 1:
                                {
                                    Token token = New1(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    switch (currentState.id())
                                    {
                                        case 0: currentState = State.PACKAGE; break;
                                    }
                                    return token;
                                }
                            case 2:
                                {
                                    Token token = New2(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 3:
                                {
                                    Token token = New3(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 4:
                                {
                                    Token token = New4(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 5:
                                {
                                    Token token = New5(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 6:
                                {
                                    Token token = New6(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 7:
                                {
                                    Token token = New7(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 8:
                                {
                                    Token token = New8(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 9:
                                {
                                    Token token = New9(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 10:
                                {
                                    Token token = New10(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 11:
                                {
                                    Token token = New11(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 12:
                                {
                                    Token token = New12(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 13:
                                {
                                    Token token = New13(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 14:
                                {
                                    Token token = New14(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    switch (currentState.id())
                                    {
                                        case 1: currentState = State.NORMAL; break;
                                    }
                                    return token;
                                }
                            case 15:
                                {
                                    Token token = New15(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 16:
                                {
                                    Token token = New16(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 17:
                                {
                                    Token token = New17(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 18:
                                {
                                    Token token = New18(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 19:
                                {
                                    Token token = New19(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 20:
                                {
                                    Token token = New20(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 21:
                                {
                                    Token token = New21(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 22:
                                {
                                    Token token = New22(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 23:
                                {
                                    Token token = New23(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 24:
                                {
                                    Token token = New24(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 25:
                                {
                                    Token token = New25(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 26:
                                {
                                    Token token = New26(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 27:
                                {
                                    Token token = New27(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 28:
                                {
                                    Token token = New28(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 29:
                                {
                                    Token token = New29(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 30:
                                {
                                    Token token = New30(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 31:
                                {
                                    Token token = New31(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 32:
                                {
                                    Token token = New32(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 33:
                                {
                                    Token token = New33(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 34:
                                {
                                    Token token = New34(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 35:
                                {
                                    Token token = New35(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 36:
                                {
                                    Token token = New36(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                            case 37:
                                {
                                    Token token = New37(
                                        GetText(accept_length),
                                        start_line + 1,
                                        start_pos + 1);
                                    PushBack(accept_length);
                                    pos = accept_pos;
                                    line = accept_line;
                                    return token;
                                }
                        }
                    }
                    else
                    {
                        if (text.Length > 0)
                        {
                            throw new LexerException(start_line + 1, start_pos + 1, "Unknown token: " + text);
                        }
                        else
                        {
                            EOF token = new EOF(
                                start_line + 1,
                                start_pos + 1);
                            return token;
                        }
                    }
                }
            }
        }

        private Token New0(String text, int line, int pos) { return new TPackagename(text, line, pos); }
        private Token New1(String text, int line, int pos) { return new TPackagetoken(text, line, pos); }
        private Token New2(String text, int line, int pos) { return new TStatestoken(text, line, pos); }
        private Token New3(String text, int line, int pos) { return new THelperstoken(text, line, pos); }
        private Token New4(String text, int line, int pos) { return new TTokenstoken(text, line, pos); }
        private Token New5(String text, int line, int pos) { return new TIgnoredtoken(text, line, pos); }
        private Token New6(String text, int line, int pos) { return new TProductionstoken(text, line, pos); }
        private Token New7(String text, int line, int pos) { return new TAsttoken(text, line, pos); }
        private Token New8(String text, int line, int pos) { return new TNew(text, line, pos); }
        private Token New9(String text, int line, int pos) { return new TNull(text, line, pos); }
        private Token New10(String text, int line, int pos) { return new TTokenSpecifier(text, line, pos); }
        private Token New11(String text, int line, int pos) { return new TProductionSpecifier(text, line, pos); }
        private Token New12(String text, int line, int pos) { return new TDot(text, line, pos); }
        private Token New13(String text, int line, int pos) { return new TDDot(text, line, pos); }
        private Token New14(String text, int line, int pos) { return new TSemicolon(text, line, pos); }
        private Token New15(String text, int line, int pos) { return new TEqual(text, line, pos); }
        private Token New16(String text, int line, int pos) { return new TLBkt(text, line, pos); }
        private Token New17(String text, int line, int pos) { return new TRBkt(text, line, pos); }
        private Token New18(String text, int line, int pos) { return new TLPar(text, line, pos); }
        private Token New19(String text, int line, int pos) { return new TRPar(text, line, pos); }
        private Token New20(String text, int line, int pos) { return new TLBrace(text, line, pos); }
        private Token New21(String text, int line, int pos) { return new TRBrace(text, line, pos); }
        private Token New22(String text, int line, int pos) { return new TPlus(text, line, pos); }
        private Token New23(String text, int line, int pos) { return new TMinus(text, line, pos); }
        private Token New24(String text, int line, int pos) { return new TQMark(text, line, pos); }
        private Token New25(String text, int line, int pos) { return new TStar(text, line, pos); }
        private Token New26(String text, int line, int pos) { return new TPipe(text, line, pos); }
        private Token New27(String text, int line, int pos) { return new TComma(text, line, pos); }
        private Token New28(String text, int line, int pos) { return new TSlash(text, line, pos); }
        private Token New29(String text, int line, int pos) { return new TArrow(text, line, pos); }
        private Token New30(String text, int line, int pos) { return new TColon(text, line, pos); }
        private Token New31(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
        private Token New32(String text, int line, int pos) { return new TCharacter(text, line, pos); }
        private Token New33(String text, int line, int pos) { return new TDecChar(text, line, pos); }
        private Token New34(String text, int line, int pos) { return new THexChar(text, line, pos); }
        private Token New35(String text, int line, int pos) { return new TString(text, line, pos); }
        private Token New36(String text, int line, int pos) { return new TBlank(text, line, pos); }
        private Token New37(String text, int line, int pos) { return new TComment(text, line, pos); }

        private int GetChar()
        {
            if (eof)
            {
                return -1;
            }

            int result = input.Read();

            if (result == -1)
            {
                eof = true;
            }

            return result;
        }

        private void PushBack(int acceptLength)
        {
            int length = text.Length;
            for (int i = length - 1; i >= acceptLength; i--)
            {
                eof = false;

                input.Unread(text[i]);
            }
        }


        protected virtual void Unread(Token token)
        {
            String text = token.Text;
            int length = text.Length;

            for (int i = length - 1; i >= 0; i--)
            {
                eof = false;

                input.Unread(text[i]);
            }

            pos = token.Position - 1;
            line = token.Line - 1;
        }

        private string GetText(int acceptLength)
        {
            StringBuilder s = new StringBuilder(acceptLength);
            for (int i = 0; i < acceptLength; i++)
            {
                s.Append(text[i]);
            }

            return s.ToString();
        }

        private static int[][][][] gotoTable = {
      new int[][][] {
        new int[][] {
          new int[] {9, 9, 1},
          new int[] {10, 10, 2},
          new int[] {13, 13, 3},
          new int[] {32, 32, 4},
          new int[] {39, 39, 5},
          new int[] {40, 40, 6},
          new int[] {41, 41, 7},
          new int[] {42, 42, 8},
          new int[] {43, 43, 9},
          new int[] {44, 44, 10},
          new int[] {45, 45, 11},
          new int[] {46, 46, 12},
          new int[] {47, 47, 13},
          new int[] {48, 48, 14},
          new int[] {49, 57, 15},
          new int[] {58, 58, 16},
          new int[] {59, 59, 17},
          new int[] {61, 61, 18},
          new int[] {63, 63, 19},
          new int[] {65, 65, 20},
          new int[] {72, 72, 21},
          new int[] {73, 73, 22},
          new int[] {78, 78, 23},
          new int[] {80, 80, 24},
          new int[] {83, 83, 25},
          new int[] {84, 84, 26},
          new int[] {91, 91, 27},
          new int[] {93, 93, 28},
          new int[] {97, 122, 29},
          new int[] {123, 123, 30},
          new int[] {124, 124, 31},
          new int[] {125, 125, 32},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {9, 9, 1},
          new int[] {10, 10, 33},
          new int[] {13, 32, -2},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {0, 9, 34},
          new int[] {11, 12, 34},
          new int[] {14, 38, 34},
          new int[] {39, 39, 35},
          new int[] {40, 65535, 34},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {62, 62, 36},
        },
        new int[][] {
          new int[] {46, 46, 37},
        },
        new int[][] {
          new int[] {42, 42, 38},
          new int[] {47, 47, 39},
        },
        new int[][] {
          new int[] {48, 57, 15},
          new int[] {88, 88, 40},
          new int[] {120, 120, 41},
        },
        new int[][] {
          new int[] {48, 57, 15},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {98, 98, 42},
        },
        new int[][] {
          new int[] {101, 101, 43},
        },
        new int[][] {
          new int[] {103, 103, 44},
        },
        new int[][] {
          new int[] {101, 101, 45},
          new int[] {117, 117, 46},
        },
        new int[][] {
          new int[] {97, 97, 47},
          new int[] {114, 114, 48},
        },
        new int[][] {
          new int[] {116, 116, 49},
        },
        new int[][] {
          new int[] {111, 111, 50},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 57, 51},
          new int[] {95, 95, 52},
          new int[] {97, 122, 53},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {0, 9, 54},
          new int[] {11, 12, 54},
          new int[] {14, 38, 54},
          new int[] {39, 39, 55},
          new int[] {40, 65535, 54},
        },
        new int[][] {
          new int[] {39, 39, 56},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {0, 41, 57},
          new int[] {42, 42, 58},
          new int[] {43, 65535, 57},
        },
        new int[][] {
          new int[] {0, 9, 59},
          new int[] {10, 10, 60},
          new int[] {11, 12, 59},
          new int[] {13, 13, 61},
          new int[] {14, 65535, 59},
        },
        new int[][] {
          new int[] {48, 57, 62},
          new int[] {65, 70, 62},
          new int[] {97, 102, 62},
        },
        new int[][] {
          new int[] {48, 102, -42},
        },
        new int[][] {
          new int[] {115, 115, 63},
        },
        new int[][] {
          new int[] {108, 108, 64},
        },
        new int[][] {
          new int[] {110, 110, 65},
        },
        new int[][] {
          new int[] {119, 119, 66},
        },
        new int[][] {
          new int[] {108, 108, 67},
        },
        new int[][] {
          new int[] {99, 99, 68},
        },
        new int[][] {
          new int[] {111, 111, 69},
        },
        new int[][] {
          new int[] {97, 97, 70},
        },
        new int[][] {
          new int[] {107, 107, 71},
        },
        new int[][] {
          new int[] {48, 122, -31},
        },
        new int[][] {
          new int[] {97, 122, 72},
        },
        new int[][] {
          new int[] {48, 122, -31},
        },
        new int[][] {
          new int[] {0, 38, -36},
          new int[] {39, 39, 73},
          new int[] {40, 65535, 54},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {0, 65535, -40},
        },
        new int[][] {
          new int[] {0, 41, 74},
          new int[] {42, 42, 58},
          new int[] {43, 46, 74},
          new int[] {47, 47, 75},
          new int[] {48, 65535, 74},
        },
        new int[][] {
          new int[] {0, 65535, -41},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {10, 10, 76},
        },
        new int[][] {
          new int[] {48, 102, -42},
        },
        new int[][] {
          new int[] {116, 116, 77},
        },
        new int[][] {
          new int[] {112, 112, 78},
        },
        new int[][] {
          new int[] {111, 111, 79},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {108, 108, 80},
        },
        new int[][] {
          new int[] {107, 107, 81},
        },
        new int[][] {
          new int[] {100, 100, 82},
        },
        new int[][] {
          new int[] {116, 116, 83},
        },
        new int[][] {
          new int[] {101, 101, 84},
        },
        new int[][] {
          new int[] {48, 57, 85},
          new int[] {95, 95, 52},
          new int[] {97, 122, 86},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {0, 41, 87},
          new int[] {42, 42, 88},
          new int[] {43, 65535, 87},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {114, 114, 89},
        },
        new int[][] {
          new int[] {101, 101, 90},
        },
        new int[][] {
          new int[] {114, 114, 91},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {97, 97, 92},
        },
        new int[][] {
          new int[] {117, 117, 93},
        },
        new int[][] {
          new int[] {101, 101, 94},
        },
        new int[][] {
          new int[] {110, 110, 95},
        },
        new int[][] {
          new int[] {48, 122, -74},
        },
        new int[][] {
          new int[] {48, 122, -74},
        },
        new int[][] {
          new int[] {0, 65535, -76},
        },
        new int[][] {
          new int[] {0, 41, 74},
          new int[] {42, 42, 88},
          new int[] {43, 65535, -60},
        },
        new int[][] {
          new int[] {97, 97, 96},
        },
        new int[][] {
          new int[] {114, 114, 97},
        },
        new int[][] {
          new int[] {101, 101, 98},
        },
        new int[][] {
          new int[] {103, 103, 99},
        },
        new int[][] {
          new int[] {99, 99, 100},
        },
        new int[][] {
          new int[] {115, 115, 101},
        },
        new int[][] {
          new int[] {115, 115, 102},
        },
        new int[][] {
          new int[] {99, 99, 103},
        },
        new int[][] {
          new int[] {115, 115, 104},
        },
        new int[][] {
          new int[] {100, 100, 105},
        },
        new int[][] {
          new int[] {101, 101, 106},
        },
        new int[][] {
          new int[] {116, 116, 107},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {116, 116, 108},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {105, 105, 109},
        },
        new int[][] {
          new int[] {9, 9, 110},
          new int[] {32, 32, 111},
        },
        new int[][] {
          new int[] {111, 111, 112},
        },
        new int[][] {
          new int[] {9, 32, -110},
          new int[] {83, 83, 113},
        },
        new int[][] {
          new int[] {9, 83, -112},
        },
        new int[][] {
          new int[] {110, 110, 114},
        },
        new int[][] {
          new int[] {121, 121, 115},
        },
        new int[][] {
          new int[] {115, 115, 116},
        },
        new int[][] {
          new int[] {110, 110, 117},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {116, 116, 118},
        },
        new int[][] {
          new int[] {97, 97, 119},
        },
        new int[][] {
          new int[] {120, 120, 120},
        },
        new int[][] {
          new int[] {9, 9, 121},
          new int[] {32, 32, 122},
        },
        new int[][] {
          new int[] {9, 32, -122},
          new int[] {84, 84, 123},
        },
        new int[][] {
          new int[] {9, 84, -123},
        },
        new int[][] {
          new int[] {114, 114, 124},
        },
        new int[][] {
          new int[] {101, 101, 125},
        },
        new int[][] {
          new int[] {101, 101, 126},
        },
        new int[][] {
        },
      },
      new int[][][] {
        new int[][] {
          new int[] {9, 9, 1},
          new int[] {10, 10, 2},
          new int[] {13, 13, 3},
          new int[] {32, 32, 4},
          new int[] {36, 36, 5},
          new int[] {39, 39, 6},
          new int[] {40, 40, 7},
          new int[] {41, 41, 8},
          new int[] {42, 42, 9},
          new int[] {43, 43, 10},
          new int[] {44, 44, 11},
          new int[] {45, 45, 12},
          new int[] {46, 46, 13},
          new int[] {47, 47, 14},
          new int[] {48, 48, 15},
          new int[] {49, 57, 16},
          new int[] {58, 58, 17},
          new int[] {59, 59, 18},
          new int[] {61, 61, 19},
          new int[] {63, 63, 20},
          new int[] {65, 65, 21},
          new int[] {66, 71, 22},
          new int[] {72, 72, 23},
          new int[] {73, 73, 24},
          new int[] {74, 77, 22},
          new int[] {78, 78, 25},
          new int[] {79, 79, 22},
          new int[] {80, 80, 26},
          new int[] {81, 82, 22},
          new int[] {83, 83, 27},
          new int[] {84, 84, 28},
          new int[] {85, 90, 22},
          new int[] {91, 91, 29},
          new int[] {93, 93, 30},
          new int[] {95, 95, 31},
          new int[] {97, 122, 32},
          new int[] {123, 123, 33},
          new int[] {124, 124, 34},
          new int[] {125, 125, 35},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {9, 9, 1},
          new int[] {10, 10, 36},
          new int[] {13, 32, -2},
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {36, 36, 37},
          new int[] {46, 46, 38},
          new int[] {48, 57, 39},
          new int[] {65, 90, 40},
          new int[] {95, 95, 41},
          new int[] {97, 122, 42},
        },
        new int[][] {
          new int[] {0, 9, 43},
          new int[] {11, 12, 43},
          new int[] {14, 38, 43},
          new int[] {39, 39, 44},
          new int[] {40, 65535, 43},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {62, 62, 45},
        },
        new int[][] {
          new int[] {46, 46, 46},
        },
        new int[][] {
          new int[] {42, 42, 47},
          new int[] {47, 47, 48},
        },
        new int[][] {
          new int[] {48, 57, 16},
          new int[] {88, 88, 49},
          new int[] {120, 120, 50},
        },
        new int[][] {
          new int[] {48, 57, 16},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 97, 42},
          new int[] {98, 98, 51},
          new int[] {99, 122, 42},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 100, 42},
          new int[] {101, 101, 52},
          new int[] {102, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 102, 42},
          new int[] {103, 103, 53},
          new int[] {104, 122, 42},
        },
        new int[][] {
          new int[] {36, 100, -25},
          new int[] {101, 101, 54},
          new int[] {102, 116, 42},
          new int[] {117, 117, 55},
          new int[] {118, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 113, 42},
          new int[] {114, 114, 56},
          new int[] {115, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 115, 42},
          new int[] {116, 116, 57},
          new int[] {117, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 110, 42},
          new int[] {111, 111, 58},
          new int[] {112, 122, 42},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 46, -7},
          new int[] {48, 57, 59},
          new int[] {65, 90, 40},
          new int[] {95, 95, 60},
          new int[] {97, 122, 61},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {9, 32, -2},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 36, 62},
          new int[] {65, 90, 63},
          new int[] {95, 95, 64},
          new int[] {97, 122, 65},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {0, 9, 66},
          new int[] {11, 12, 66},
          new int[] {14, 38, 66},
          new int[] {39, 39, 67},
          new int[] {40, 65535, 66},
        },
        new int[][] {
          new int[] {39, 39, 68},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {0, 41, 69},
          new int[] {42, 42, 70},
          new int[] {43, 65535, 69},
        },
        new int[][] {
          new int[] {0, 9, 71},
          new int[] {10, 10, 72},
          new int[] {11, 12, 71},
          new int[] {13, 13, 73},
          new int[] {14, 65535, 71},
        },
        new int[][] {
          new int[] {48, 57, 74},
          new int[] {65, 70, 74},
          new int[] {97, 102, 74},
        },
        new int[][] {
          new int[] {48, 102, -51},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 114, 42},
          new int[] {115, 115, 75},
          new int[] {116, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 107, 42},
          new int[] {108, 108, 76},
          new int[] {109, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 109, 42},
          new int[] {110, 110, 77},
          new int[] {111, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 118, 42},
          new int[] {119, 119, 78},
          new int[] {120, 122, 42},
        },
        new int[][] {
          new int[] {36, 107, -54},
          new int[] {108, 108, 79},
          new int[] {109, 122, 42},
        },
        new int[][] {
          new int[] {36, 110, -30},
          new int[] {111, 111, 80},
          new int[] {112, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 97, 81},
          new int[] {98, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 106, 42},
          new int[] {107, 107, 82},
          new int[] {108, 122, 42},
        },
        new int[][] {
          new int[] {36, 122, -34},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 122, 83},
        },
        new int[][] {
          new int[] {36, 122, -34},
        },
        new int[][] {
          new int[] {36, 36, 84},
          new int[] {46, 46, 38},
          new int[] {48, 57, 85},
          new int[] {65, 90, 86},
          new int[] {95, 95, 87},
          new int[] {97, 122, 88},
        },
        new int[][] {
          new int[] {36, 122, -64},
        },
        new int[][] {
          new int[] {36, 122, -64},
        },
        new int[][] {
          new int[] {36, 122, -64},
        },
        new int[][] {
          new int[] {0, 38, -45},
          new int[] {39, 39, 89},
          new int[] {40, 65535, 66},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {0, 65535, -49},
        },
        new int[][] {
          new int[] {0, 41, 90},
          new int[] {42, 42, 70},
          new int[] {43, 46, 90},
          new int[] {47, 47, 91},
          new int[] {48, 65535, 90},
        },
        new int[][] {
          new int[] {0, 65535, -50},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {10, 10, 92},
        },
        new int[][] {
          new int[] {48, 102, -51},
        },
        new int[][] {
          new int[] {36, 115, -29},
          new int[] {116, 116, 93},
          new int[] {117, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 111, 42},
          new int[] {112, 112, 94},
          new int[] {113, 122, 42},
        },
        new int[][] {
          new int[] {36, 110, -30},
          new int[] {111, 111, 95},
          new int[] {112, 122, 42},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 107, -54},
          new int[] {108, 108, 96},
          new int[] {109, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 99, 42},
          new int[] {100, 100, 97},
          new int[] {101, 122, 42},
        },
        new int[][] {
          new int[] {36, 115, -29},
          new int[] {116, 116, 98},
          new int[] {117, 122, 42},
        },
        new int[][] {
          new int[] {36, 100, -25},
          new int[] {101, 101, 99},
          new int[] {102, 122, 42},
        },
        new int[][] {
          new int[] {36, 46, -7},
          new int[] {48, 57, 100},
          new int[] {65, 95, -34},
          new int[] {97, 122, 101},
        },
        new int[][] {
          new int[] {36, 122, -64},
        },
        new int[][] {
          new int[] {36, 122, -64},
        },
        new int[][] {
          new int[] {36, 122, -64},
        },
        new int[][] {
          new int[] {36, 122, -64},
        },
        new int[][] {
          new int[] {36, 122, -64},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {0, 41, 102},
          new int[] {42, 42, 103},
          new int[] {43, 65535, 102},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {36, 113, -28},
          new int[] {114, 114, 104},
          new int[] {115, 122, 42},
        },
        new int[][] {
          new int[] {36, 100, -25},
          new int[] {101, 101, 105},
          new int[] {102, 122, 42},
        },
        new int[][] {
          new int[] {36, 113, -28},
          new int[] {114, 114, 106},
          new int[] {115, 122, 42},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 116, 42},
          new int[] {117, 117, 107},
          new int[] {118, 122, 42},
        },
        new int[][] {
          new int[] {36, 100, -25},
          new int[] {101, 101, 108},
          new int[] {102, 122, 42},
        },
        new int[][] {
          new int[] {36, 109, -55},
          new int[] {110, 110, 109},
          new int[] {111, 122, 42},
        },
        new int[][] {
          new int[] {36, 122, -85},
        },
        new int[][] {
          new int[] {36, 122, -85},
        },
        new int[][] {
          new int[] {0, 65535, -92},
        },
        new int[][] {
          new int[] {0, 41, 90},
          new int[] {42, 42, 103},
          new int[] {43, 65535, -72},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 97, 110},
          new int[] {98, 122, 42},
        },
        new int[][] {
          new int[] {36, 113, -28},
          new int[] {114, 114, 111},
          new int[] {115, 122, 42},
        },
        new int[][] {
          new int[] {36, 100, -25},
          new int[] {101, 101, 112},
          new int[] {102, 122, 42},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 98, 42},
          new int[] {99, 99, 113},
          new int[] {100, 122, 42},
        },
        new int[][] {
          new int[] {36, 114, -53},
          new int[] {115, 115, 114},
          new int[] {116, 122, 42},
        },
        new int[][] {
          new int[] {36, 114, -53},
          new int[] {115, 115, 115},
          new int[] {116, 122, 42},
        },
        new int[][] {
          new int[] {36, 98, -109},
          new int[] {99, 99, 116},
          new int[] {100, 122, 42},
        },
        new int[][] {
          new int[] {36, 114, -53},
          new int[] {115, 115, 117},
          new int[] {116, 122, 42},
        },
        new int[][] {
          new int[] {36, 99, -82},
          new int[] {100, 100, 118},
          new int[] {101, 122, 42},
        },
        new int[][] {
          new int[] {36, 115, -29},
          new int[] {116, 116, 119},
          new int[] {117, 122, 42},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 115, -29},
          new int[] {116, 116, 120},
          new int[] {117, 122, 42},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 95, -7},
          new int[] {97, 104, 42},
          new int[] {105, 105, 121},
          new int[] {106, 122, 42},
        },
        new int[][] {
          new int[] {9, 9, 122},
          new int[] {32, 32, 123},
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {36, 110, -30},
          new int[] {111, 111, 124},
          new int[] {112, 122, 42},
        },
        new int[][] {
          new int[] {9, 32, -122},
          new int[] {83, 83, 125},
        },
        new int[][] {
          new int[] {9, 83, -124},
        },
        new int[][] {
          new int[] {36, 109, -55},
          new int[] {110, 110, 126},
          new int[] {111, 122, 42},
        },
        new int[][] {
          new int[] {121, 121, 127},
        },
        new int[][] {
          new int[] {36, 114, -53},
          new int[] {115, 115, 128},
          new int[] {116, 122, 42},
        },
        new int[][] {
          new int[] {110, 110, 129},
        },
        new int[][] {
          new int[] {36, 122, -7},
        },
        new int[][] {
          new int[] {116, 116, 130},
        },
        new int[][] {
          new int[] {97, 97, 131},
        },
        new int[][] {
          new int[] {120, 120, 132},
        },
        new int[][] {
          new int[] {9, 9, 133},
          new int[] {32, 32, 134},
        },
        new int[][] {
          new int[] {9, 32, -134},
          new int[] {84, 84, 135},
        },
        new int[][] {
          new int[] {9, 84, -135},
        },
        new int[][] {
          new int[] {114, 114, 136},
        },
        new int[][] {
          new int[] {101, 101, 137},
        },
        new int[][] {
          new int[] {101, 101, 138},
        },
        new int[][] {
        },
      },
    };

        private static int[][] accept = {
      new int[] {
        -1, 36, 36, 36, 36, -1, 18, 19, 25, 22, 27, 23, 12, 28, 33, 33, 
        30, 14, 15, 24, -1, -1, -1, -1, 11, -1, 10, 16, 17, 31, 20, 26, 
        21, 36, -1, -1, 29, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, 31, -1, 31, -1, 32, 32, -1, -1, -1, 37, 37, 34, -1, 
        -1, -1, 8, -1, -1, -1, -1, -1, 31, 35, -1, 37, 37, -1, -1, -1, 
        9, -1, -1, -1, -1, 31, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, 2, 4, -1, 3, 5, 1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
      },
      new int[] {
        -1, 36, 36, 36, 36, 0, -1, 18, 19, 25, 22, 27, 23, 12, 28, 33, 
        33, 30, 14, 15, 24, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 0, 
        0, 20, 26, 21, 36, 0, -1, 0, 0, 0, 0, -1, -1, 29, 13, -1, 
        -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, -1, 32, 32, -1, -1, -1, 37, 37, 34, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 35, -1, 37, 37, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, -1, 
        0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
      },
    };

        public class State
        {
            public static State NORMAL = new State(0);
            public static State PACKAGE = new State(1);

            private int _id;

            private State(int _id)
            {
                this._id = _id;
            }

            public int id()
            {
                return _id;
            }
        }
    }
}
